

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Aug 01 16:28:20 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    26                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    27                           	dabs	1,0x7E,2
    28     0000                     
    29                           ; Version 2.40
    30                           ; Generated 17/11/2021 GMT
    31                           ; 
    32                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution. Publication is not required when
    46                           ;        this file is used in an embedded application.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC16F887 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64     0000                     	;# 
    65     0001                     	;# 
    66     0002                     	;# 
    67     0003                     	;# 
    68     0004                     	;# 
    69     0005                     	;# 
    70     0006                     	;# 
    71     0007                     	;# 
    72     0008                     	;# 
    73     0009                     	;# 
    74     000A                     	;# 
    75     000B                     	;# 
    76     000C                     	;# 
    77     000D                     	;# 
    78     000E                     	;# 
    79     000E                     	;# 
    80     000F                     	;# 
    81     0010                     	;# 
    82     0011                     	;# 
    83     0012                     	;# 
    84     0013                     	;# 
    85     0014                     	;# 
    86     0015                     	;# 
    87     0015                     	;# 
    88     0016                     	;# 
    89     0017                     	;# 
    90     0018                     	;# 
    91     0019                     	;# 
    92     001A                     	;# 
    93     001B                     	;# 
    94     001B                     	;# 
    95     001C                     	;# 
    96     001D                     	;# 
    97     001E                     	;# 
    98     001F                     	;# 
    99     0081                     	;# 
   100     0085                     	;# 
   101     0086                     	;# 
   102     0087                     	;# 
   103     0088                     	;# 
   104     0089                     	;# 
   105     008C                     	;# 
   106     008D                     	;# 
   107     008E                     	;# 
   108     008F                     	;# 
   109     0090                     	;# 
   110     0091                     	;# 
   111     0092                     	;# 
   112     0093                     	;# 
   113     0093                     	;# 
   114     0093                     	;# 
   115     0094                     	;# 
   116     0095                     	;# 
   117     0096                     	;# 
   118     0097                     	;# 
   119     0098                     	;# 
   120     0099                     	;# 
   121     009A                     	;# 
   122     009B                     	;# 
   123     009C                     	;# 
   124     009D                     	;# 
   125     009E                     	;# 
   126     009F                     	;# 
   127     0105                     	;# 
   128     0107                     	;# 
   129     0108                     	;# 
   130     0109                     	;# 
   131     010C                     	;# 
   132     010C                     	;# 
   133     010D                     	;# 
   134     010E                     	;# 
   135     010F                     	;# 
   136     0185                     	;# 
   137     0187                     	;# 
   138     0188                     	;# 
   139     0189                     	;# 
   140     018C                     	;# 
   141     018D                     	;# 
   142     0000                     	;# 
   143     0001                     	;# 
   144     0002                     	;# 
   145     0003                     	;# 
   146     0004                     	;# 
   147     0005                     	;# 
   148     0006                     	;# 
   149     0007                     	;# 
   150     0008                     	;# 
   151     0009                     	;# 
   152     000A                     	;# 
   153     000B                     	;# 
   154     000C                     	;# 
   155     000D                     	;# 
   156     000E                     	;# 
   157     000E                     	;# 
   158     000F                     	;# 
   159     0010                     	;# 
   160     0011                     	;# 
   161     0012                     	;# 
   162     0013                     	;# 
   163     0014                     	;# 
   164     0015                     	;# 
   165     0015                     	;# 
   166     0016                     	;# 
   167     0017                     	;# 
   168     0018                     	;# 
   169     0019                     	;# 
   170     001A                     	;# 
   171     001B                     	;# 
   172     001B                     	;# 
   173     001C                     	;# 
   174     001D                     	;# 
   175     001E                     	;# 
   176     001F                     	;# 
   177     0081                     	;# 
   178     0085                     	;# 
   179     0086                     	;# 
   180     0087                     	;# 
   181     0088                     	;# 
   182     0089                     	;# 
   183     008C                     	;# 
   184     008D                     	;# 
   185     008E                     	;# 
   186     008F                     	;# 
   187     0090                     	;# 
   188     0091                     	;# 
   189     0092                     	;# 
   190     0093                     	;# 
   191     0093                     	;# 
   192     0093                     	;# 
   193     0094                     	;# 
   194     0095                     	;# 
   195     0096                     	;# 
   196     0097                     	;# 
   197     0098                     	;# 
   198     0099                     	;# 
   199     009A                     	;# 
   200     009B                     	;# 
   201     009C                     	;# 
   202     009D                     	;# 
   203     009E                     	;# 
   204     009F                     	;# 
   205     0105                     	;# 
   206     0107                     	;# 
   207     0108                     	;# 
   208     0109                     	;# 
   209     010C                     	;# 
   210     010C                     	;# 
   211     010D                     	;# 
   212     010E                     	;# 
   213     010F                     	;# 
   214     0185                     	;# 
   215     0187                     	;# 
   216     0188                     	;# 
   217     0189                     	;# 
   218     018C                     	;# 
   219     018D                     	;# 
   220     0000                     	;# 
   221     0001                     	;# 
   222     0002                     	;# 
   223     0003                     	;# 
   224     0004                     	;# 
   225     0005                     	;# 
   226     0006                     	;# 
   227     0007                     	;# 
   228     0008                     	;# 
   229     0009                     	;# 
   230     000A                     	;# 
   231     000B                     	;# 
   232     000C                     	;# 
   233     000D                     	;# 
   234     000E                     	;# 
   235     000E                     	;# 
   236     000F                     	;# 
   237     0010                     	;# 
   238     0011                     	;# 
   239     0012                     	;# 
   240     0013                     	;# 
   241     0014                     	;# 
   242     0015                     	;# 
   243     0015                     	;# 
   244     0016                     	;# 
   245     0017                     	;# 
   246     0018                     	;# 
   247     0019                     	;# 
   248     001A                     	;# 
   249     001B                     	;# 
   250     001B                     	;# 
   251     001C                     	;# 
   252     001D                     	;# 
   253     001E                     	;# 
   254     001F                     	;# 
   255     0081                     	;# 
   256     0085                     	;# 
   257     0086                     	;# 
   258     0087                     	;# 
   259     0088                     	;# 
   260     0089                     	;# 
   261     008C                     	;# 
   262     008D                     	;# 
   263     008E                     	;# 
   264     008F                     	;# 
   265     0090                     	;# 
   266     0091                     	;# 
   267     0092                     	;# 
   268     0093                     	;# 
   269     0093                     	;# 
   270     0093                     	;# 
   271     0094                     	;# 
   272     0095                     	;# 
   273     0096                     	;# 
   274     0097                     	;# 
   275     0098                     	;# 
   276     0099                     	;# 
   277     009A                     	;# 
   278     009B                     	;# 
   279     009C                     	;# 
   280     009D                     	;# 
   281     009E                     	;# 
   282     009F                     	;# 
   283     0105                     	;# 
   284     0107                     	;# 
   285     0108                     	;# 
   286     0109                     	;# 
   287     010C                     	;# 
   288     010C                     	;# 
   289     010D                     	;# 
   290     010E                     	;# 
   291     010F                     	;# 
   292     0185                     	;# 
   293     0187                     	;# 
   294     0188                     	;# 
   295     0189                     	;# 
   296     018C                     	;# 
   297     018D                     	;# 
   298     0000                     	;# 
   299     0001                     	;# 
   300     0002                     	;# 
   301     0003                     	;# 
   302     0004                     	;# 
   303     0005                     	;# 
   304     0006                     	;# 
   305     0007                     	;# 
   306     0008                     	;# 
   307     0009                     	;# 
   308     000A                     	;# 
   309     000B                     	;# 
   310     000C                     	;# 
   311     000D                     	;# 
   312     000E                     	;# 
   313     000E                     	;# 
   314     000F                     	;# 
   315     0010                     	;# 
   316     0011                     	;# 
   317     0012                     	;# 
   318     0013                     	;# 
   319     0014                     	;# 
   320     0015                     	;# 
   321     0015                     	;# 
   322     0016                     	;# 
   323     0017                     	;# 
   324     0018                     	;# 
   325     0019                     	;# 
   326     001A                     	;# 
   327     001B                     	;# 
   328     001B                     	;# 
   329     001C                     	;# 
   330     001D                     	;# 
   331     001E                     	;# 
   332     001F                     	;# 
   333     0081                     	;# 
   334     0085                     	;# 
   335     0086                     	;# 
   336     0087                     	;# 
   337     0088                     	;# 
   338     0089                     	;# 
   339     008C                     	;# 
   340     008D                     	;# 
   341     008E                     	;# 
   342     008F                     	;# 
   343     0090                     	;# 
   344     0091                     	;# 
   345     0092                     	;# 
   346     0093                     	;# 
   347     0093                     	;# 
   348     0093                     	;# 
   349     0094                     	;# 
   350     0095                     	;# 
   351     0096                     	;# 
   352     0097                     	;# 
   353     0098                     	;# 
   354     0099                     	;# 
   355     009A                     	;# 
   356     009B                     	;# 
   357     009C                     	;# 
   358     009D                     	;# 
   359     009E                     	;# 
   360     009F                     	;# 
   361     0105                     	;# 
   362     0107                     	;# 
   363     0108                     	;# 
   364     0109                     	;# 
   365     010C                     	;# 
   366     010C                     	;# 
   367     010D                     	;# 
   368     010E                     	;# 
   369     010F                     	;# 
   370     0185                     	;# 
   371     0187                     	;# 
   372     0188                     	;# 
   373     0189                     	;# 
   374     018C                     	;# 
   375     018D                     	;# 
   376     0009                     _PORTEbits	set	9
   377     0006                     _PORTBbits	set	6
   378     0013                     _SSPBUF	set	19
   379     0014                     _SSPCON	set	20
   380     0008                     _PORTD	set	8
   381     0006                     _PORTB	set	6
   382     0005                     _PORTA	set	5
   383     0007                     _PORTCbits	set	7
   384     0094                     _SSPSTATbits	set	148
   385     0094                     _SSPSTAT	set	148
   386     0089                     _TRISE	set	137
   387     0088                     _TRISD	set	136
   388     0086                     _TRISB	set	134
   389     0085                     _TRISA	set	133
   390     008F                     _OSCCONbits	set	143
   391     043B                     _TRISC3	set	1083
   392     043D                     _TRISC5	set	1085
   393     0439                     _TRISC1	set	1081
   394     043A                     _TRISC2	set	1082
   395     0189                     _ANSELH	set	393
   396     0188                     _ANSEL	set	392
   397                           
   398                           	psect	strings
   399     0003                     __pstrings:
   400     0003                     stringtab:
   401     0003                     __stringtab:
   402     0003                     stringcode:	
   403                           ;	String table - string pointers are 1 byte each
   404                           
   405     0003                     stringdir:
   406     0003  3000               	movlw	high stringdir
   407     0004  008A               	movwf	10
   408     0005  0804               	movf	4,w
   409     0006  0A84               	incf	4,f
   410     0007  0782               	addwf	2,f
   411     0008                     __stringbase:
   412     0008  3400               	retlw	0
   413     0009                     __end_of__stringtab:
   414     0009                     STR_1:
   415     0009  3453               	retlw	83	;'S'
   416     000A  3431               	retlw	49	;'1'
   417     000B  343A               	retlw	58	;':'
   418     000C  3420               	retlw	32	;' '
   419     000D  3420               	retlw	32	;' '
   420     000E  3420               	retlw	32	;' '
   421     000F  3420               	retlw	32	;' '
   422     0010  3453               	retlw	83	;'S'
   423     0011  3432               	retlw	50	;'2'
   424     0012  343A               	retlw	58	;':'
   425     0013  3420               	retlw	32	;' '
   426     0014  3420               	retlw	32	;' '
   427     0015  3420               	retlw	32	;' '
   428     0016  3420               	retlw	32	;' '
   429     0017  3453               	retlw	83	;'S'
   430     0018  3433               	retlw	51	;'3'
   431     0019  343A               	retlw	58	;':'
   432     001A  3400               	retlw	0
   433     001B                     STR_3:
   434     001B  3420               	retlw	32	;' '
   435     001C  3420               	retlw	32	;' '
   436     001D  3420               	retlw	32	;' '
   437     001E  3420               	retlw	32	;' '
   438     001F  3400               	retlw	0
   439     001C                     
   440                           	psect	cinit
   441     07F6                     start_initialization:	
   442                           ; #config settings
   443                           
   444     07F6                     __initialization:
   445                           
   446                           ; Clear objects allocated to COMMON
   447     07F6  01FC               	clrf	__pbssCOMMON& (0+127)
   448     07F7  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   449                           
   450                           ; Clear objects allocated to BANK0
   451     07F8  1283               	bcf	3,5	;RP0=0, select bank0
   452     07F9  1303               	bcf	3,6	;RP1=0, select bank0
   453     07FA  01AF               	clrf	__pbssBANK0& (0+127)
   454     07FB  01B0               	clrf	(__pbssBANK0+1)& (0+127)
   455     07FC                     end_of_initialization:	
   456                           ;End of C runtime variable initialization code
   457                           
   458     07FC                     __end_of__initialization:
   459     07FC  0183               	clrf	3
   460     07FD  120A  118A  2F15   	ljmp	_main	;jump to C main() function
   461                           
   462                           	psect	bssCOMMON
   463     007C                     __pbssCOMMON:
   464     007C                     _modo:
   465     007C                     	ds	1
   466     007D                     _ADC:
   467     007D                     	ds	1
   468                           
   469                           	psect	bssBANK0
   470     002F                     __pbssBANK0:
   471     002F                     _TEMP:
   472     002F                     	ds	1
   473     0030                     _CONT:
   474     0030                     	ds	1
   475                           
   476                           	psect	cstackCOMMON
   477     0070                     __pcstackCOMMON:
   478     0070                     ?_setup:
   479     0070                     ?_LcdALL_Init:	
   480                           ; 1 bytes @ 0x0
   481                           
   482     0070                     ?_LcdALL_Write_String:	
   483                           ; 1 bytes @ 0x0
   484                           
   485     0070                     ?_spiWrite:	
   486                           ; 1 bytes @ 0x0
   487                           
   488     0070                     ??_spiWrite:	
   489                           ; 1 bytes @ 0x0
   490                           
   491     0070                     ?_spiRead:	
   492                           ; 1 bytes @ 0x0
   493                           
   494     0070                     ??_spiRead:	
   495                           ; 1 bytes @ 0x0
   496                           
   497     0070                     ?_spiInit:	
   498                           ; 1 bytes @ 0x0
   499                           
   500     0070                     ?_main:	
   501                           ; 1 bytes @ 0x0
   502                           
   503     0070                     ?_spiReceiveWait:	
   504                           ; 1 bytes @ 0x0
   505                           
   506     0070                     ??_spiReceiveWait:	
   507                           ; 1 bytes @ 0x0
   508                           
   509     0070                     ?_LcdALL_Port:	
   510                           ; 1 bytes @ 0x0
   511                           
   512     0070                     ??_LcdALL_Port:	
   513                           ; 1 bytes @ 0x0
   514                           
   515     0070                     ?_LcdALL_Cmd:	
   516                           ; 1 bytes @ 0x0
   517                           
   518     0070                     ?_LcdALL_Write_Char:	
   519                           ; 1 bytes @ 0x0
   520                           
   521     0070                     ?___awmod:	
   522                           ; 1 bytes @ 0x0
   523                           
   524     0070                     spiInit@sDataSample:	
   525                           ; 2 bytes @ 0x0
   526                           
   527     0070                     spiWrite@dat:	
   528                           ; 1 bytes @ 0x0
   529                           
   530     0070                     ___awmod@divisor:	
   531                           ; 1 bytes @ 0x0
   532                           
   533                           
   534                           ; 2 bytes @ 0x0
   535     0070                     	ds	1
   536     0071                     spiInit@sClockIdle:
   537                           
   538                           ; 1 bytes @ 0x1
   539     0071                     	ds	1
   540     0072                     spiInit@sTransmitEdge:
   541     0072                     LcdALL_Port@a:	
   542                           ; 1 bytes @ 0x2
   543                           
   544     0072                     ___awmod@dividend:	
   545                           ; 1 bytes @ 0x2
   546                           
   547                           
   548                           ; 2 bytes @ 0x2
   549     0072                     	ds	1
   550     0073                     ??_spiInit:
   551     0073                     ??_LcdALL_Cmd:	
   552                           ; 1 bytes @ 0x3
   553                           
   554     0073                     ??_LcdALL_Write_Char:	
   555                           ; 1 bytes @ 0x3
   556                           
   557     0073                     spiInit@sType:	
   558                           ; 1 bytes @ 0x3
   559                           
   560                           
   561                           ; 1 bytes @ 0x3
   562     0073                     	ds	1
   563     0074                     ??_setup:
   564     0074                     ??___awmod:	
   565                           ; 1 bytes @ 0x4
   566                           
   567     0074                     LcdALL_Write_Char@a:	
   568                           ; 1 bytes @ 0x4
   569                           
   570                           
   571                           ; 1 bytes @ 0x4
   572     0074                     	ds	1
   573     0075                     ??_LcdALL_Write_String:
   574     0075                     LcdALL_Cmd@a:	
   575                           ; 1 bytes @ 0x5
   576                           
   577     0075                     ___awmod@counter:	
   578                           ; 1 bytes @ 0x5
   579                           
   580     0075                     LcdALL_Write_String@i:	
   581                           ; 1 bytes @ 0x5
   582                           
   583                           
   584                           ; 2 bytes @ 0x5
   585     0075                     	ds	1
   586     0076                     ??_LcdALL_Init:
   587     0076                     ?_LcdALL_Set_Cursor:	
   588                           ; 1 bytes @ 0x6
   589                           
   590     0076                     LcdALL_Set_Cursor@b:	
   591                           ; 1 bytes @ 0x6
   592                           
   593     0076                     ___awmod@sign:	
   594                           ; 1 bytes @ 0x6
   595                           
   596                           
   597                           ; 1 bytes @ 0x6
   598     0076                     	ds	1
   599     0077                     ??_LcdALL_Set_Cursor:
   600     0077                     ?___awdiv:	
   601                           ; 1 bytes @ 0x7
   602                           
   603     0077                     LcdALL_Set_Cursor@a:	
   604                           ; 2 bytes @ 0x7
   605                           
   606     0077                     LcdALL_Write_String@a:	
   607                           ; 1 bytes @ 0x7
   608                           
   609     0077                     ___awdiv@divisor:	
   610                           ; 1 bytes @ 0x7
   611                           
   612                           
   613                           ; 2 bytes @ 0x7
   614     0077                     	ds	1
   615     0078                     LcdALL_Set_Cursor@temp:
   616                           
   617                           ; 1 bytes @ 0x8
   618     0078                     	ds	1
   619     0079                     ___awdiv@dividend:
   620                           
   621                           ; 2 bytes @ 0x9
   622     0079                     	ds	2
   623     007B                     ??___awdiv:
   624                           
   625                           ; 1 bytes @ 0xB
   626     007B                     	ds	1
   627     007C                     ??_LcdALL_set_value:
   628                           
   629                           	psect	cstackBANK0
   630     0020                     __pcstackBANK0:	
   631                           ; 1 bytes @ 0xC
   632                           
   633     0020                     ___awdiv@counter:
   634                           
   635                           ; 1 bytes @ 0x0
   636     0020                     	ds	1
   637     0021                     ___awdiv@sign:
   638                           
   639                           ; 1 bytes @ 0x1
   640     0021                     	ds	1
   641     0022                     ___awdiv@quotient:
   642                           
   643                           ; 2 bytes @ 0x2
   644     0022                     	ds	2
   645     0024                     ?_LcdALL_set_value:
   646     0024                     LcdALL_set_value@byte_value:	
   647                           ; 1 bytes @ 0x4
   648                           
   649                           
   650                           ; 2 bytes @ 0x4
   651     0024                     	ds	2
   652     0026                     LcdALL_set_value@centenas:
   653                           
   654                           ; 2 bytes @ 0x6
   655     0026                     	ds	2
   656     0028                     LcdALL_set_value@decenas:
   657                           
   658                           ; 2 bytes @ 0x8
   659     0028                     	ds	2
   660     002A                     LcdALL_set_value@unidades:
   661                           
   662                           ; 2 bytes @ 0xA
   663     002A                     	ds	2
   664     002C                     ??_main:
   665                           
   666                           ; 1 bytes @ 0xC
   667     002C                     	ds	3
   668                           
   669                           	psect	maintext
   670     0715                     __pmaintext:	
   671 ;;
   672 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   673 ;;
   674 ;; *************** function _main *****************
   675 ;; Defined at:
   676 ;;		line 69 in file "main.c"
   677 ;; Parameters:    Size  Location     Type
   678 ;;		None
   679 ;; Auto vars:     Size  Location     Type
   680 ;;		None
   681 ;; Return value:  Size  Location     Type
   682 ;;                  1    wreg      void 
   683 ;; Registers used:
   684 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   685 ;; Tracked objects:
   686 ;;		On entry : B00/0
   687 ;;		On exit  : 0/0
   688 ;;		Unchanged: 0/0
   689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   690 ;;      Params:         0       0       0       0       0
   691 ;;      Locals:         0       0       0       0       0
   692 ;;      Temps:          0       3       0       0       0
   693 ;;      Totals:         0       3       0       0       0
   694 ;;Total ram usage:        3 bytes
   695 ;; Hardware stack levels required when called: 3
   696 ;; This function calls:
   697 ;;		_LcdALL_Init
   698 ;;		_LcdALL_Set_Cursor
   699 ;;		_LcdALL_Write_String
   700 ;;		_LcdALL_set_value
   701 ;;		_setup
   702 ;;		_spiRead
   703 ;;		_spiWrite
   704 ;; This function is called by:
   705 ;;		Startup code after reset
   706 ;; This function uses a non-reentrant model
   707 ;;
   708                           
   709     0715                     _main:	
   710                           ;psect for function _main
   711                           
   712     0715                     l1213:	
   713                           ;incstack = 0
   714                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   715                           
   716                           
   717                           ;main.c: 70:     setup();
   718     0715  120A  118A  24F6  120A  118A  	fcall	_setup
   719                           
   720                           ;main.c: 71:     LcdALL_Init();
   721     071A  120A  118A  251E  120A  118A  	fcall	_LcdALL_Init
   722     071F                     l57:	
   723                           ;main.c: 75:     while(1){
   724                           
   725                           
   726                           ;main.c: 76:        LcdALL_Set_Cursor(1,1);
   727     071F  01F6               	clrf	LcdALL_Set_Cursor@b
   728     0720  0AF6               	incf	LcdALL_Set_Cursor@b,f
   729     0721  3001               	movlw	1
   730     0722  120A  118A  24B1  120A  118A  	fcall	_LcdALL_Set_Cursor
   731     0727                     l1215:
   732                           
   733                           ;main.c: 77:        LcdALL_Write_String("S1:    S2:    S3:");
   734     0727  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   735     0728  120A  118A  24D1  120A  118A  	fcall	_LcdALL_Write_String
   736     072D                     l1217:
   737                           
   738                           ;main.c: 79:        PORTCbits.RC2 = 0;
   739     072D  1283               	bcf	3,5	;RP0=0, select bank0
   740     072E  1303               	bcf	3,6	;RP1=0, select bank0
   741     072F  1107               	bcf	7,2	;volatile
   742     0730                     l1219:
   743                           
   744                           ;main.c: 80:        _delay((unsigned long)((1)*(8000000/4000.0)));
   745     0730  3003               	movlw	3
   746     0731  1283               	bcf	3,5	;RP0=0, select bank0
   747     0732  1303               	bcf	3,6	;RP1=0, select bank0
   748     0733  00AD               	movwf	??_main+1
   749     0734  3097               	movlw	151
   750     0735  00AC               	movwf	??_main
   751     0736                     u657:
   752     0736  0BAC               	decfsz	??_main,f
   753     0737  2F36               	goto	u657
   754     0738  0BAD               	decfsz	??_main+1,f
   755     0739  2F36               	goto	u657
   756     073A                     l1221:
   757                           
   758                           ;main.c: 81:        if (modo == 0){
   759     073A  087C               	movf	_modo,w
   760     073B  1D03               	btfss	3,2
   761     073C  2F3E               	goto	u631
   762     073D  2F3F               	goto	u630
   763     073E                     u631:
   764     073E  2F52               	goto	l1229
   765     073F                     u630:
   766     073F                     l1223:
   767                           
   768                           ;main.c: 82:             spiWrite(0);
   769     073F  3000               	movlw	0
   770     0740  120A  118A  2455  120A  118A  	fcall	_spiWrite
   771                           
   772                           ;main.c: 83:             PORTA = spiRead();
   773     0745  120A  118A  2462  120A  118A  	fcall	_spiRead
   774     074A  1283               	bcf	3,5	;RP0=0, select bank0
   775     074B  1303               	bcf	3,6	;RP1=0, select bank0
   776     074C  0085               	movwf	5	;volatile
   777     074D                     l1225:
   778                           
   779                           ;main.c: 84:             ADC = PORTA;
   780     074D  0805               	movf	5,w	;volatile
   781     074E  00FD               	movwf	_ADC
   782     074F                     l1227:
   783                           
   784                           ;main.c: 85:             modo = 1;
   785     074F  01FC               	clrf	_modo
   786     0750  0AFC               	incf	_modo,f
   787                           
   788                           ;main.c: 86:        }else if (modo == 1){
   789     0751  2F68               	goto	l1237
   790     0752                     l1229:
   791     0752  037C               	decf	_modo,w
   792     0753  1D03               	btfss	3,2
   793     0754  2F56               	goto	u641
   794     0755  2F57               	goto	u640
   795     0756                     u641:
   796     0756  2F68               	goto	l1237
   797     0757                     u640:
   798     0757                     l1231:
   799                           
   800                           ;main.c: 87:             spiWrite(0);
   801     0757  3000               	movlw	0
   802     0758  120A  118A  2455  120A  118A  	fcall	_spiWrite
   803                           
   804                           ;main.c: 88:             PORTA = spiRead();
   805     075D  120A  118A  2462  120A  118A  	fcall	_spiRead
   806     0762  1283               	bcf	3,5	;RP0=0, select bank0
   807     0763  1303               	bcf	3,6	;RP1=0, select bank0
   808     0764  0085               	movwf	5	;volatile
   809     0765                     l1233:
   810                           
   811                           ;main.c: 89:             CONT = PORTA;
   812     0765  0805               	movf	5,w	;volatile
   813     0766  00B0               	movwf	_CONT
   814     0767                     l1235:
   815                           
   816                           ;main.c: 90:             modo = 0;
   817     0767  01FC               	clrf	_modo
   818     0768                     l1237:
   819                           
   820                           ;main.c: 92:         _delay((unsigned long)((1)*(8000000/4000.0)));
   821     0768  3003               	movlw	3
   822     0769  1283               	bcf	3,5	;RP0=0, select bank0
   823     076A  1303               	bcf	3,6	;RP1=0, select bank0
   824     076B  00AD               	movwf	??_main+1
   825     076C  3097               	movlw	151
   826     076D  00AC               	movwf	??_main
   827     076E                     u667:
   828     076E  0BAC               	decfsz	??_main,f
   829     076F  2F6E               	goto	u667
   830     0770  0BAD               	decfsz	??_main+1,f
   831     0771  2F6E               	goto	u667
   832     0772                     l1239:
   833                           
   834                           ;main.c: 93:         PORTCbits.RC2 = 1;
   835     0772  1283               	bcf	3,5	;RP0=0, select bank0
   836     0773  1303               	bcf	3,6	;RP1=0, select bank0
   837     0774  1507               	bsf	7,2	;volatile
   838     0775                     l1241:
   839                           
   840                           ;main.c: 97:        PORTCbits.RC1 = 0;
   841     0775  1087               	bcf	7,1	;volatile
   842     0776                     l1243:
   843                           
   844                           ;main.c: 98:        _delay((unsigned long)((1)*(8000000/4000.0)));
   845     0776  3003               	movlw	3
   846     0777  1283               	bcf	3,5	;RP0=0, select bank0
   847     0778  1303               	bcf	3,6	;RP1=0, select bank0
   848     0779  00AD               	movwf	??_main+1
   849     077A  3097               	movlw	151
   850     077B  00AC               	movwf	??_main
   851     077C                     u677:
   852     077C  0BAC               	decfsz	??_main,f
   853     077D  2F7C               	goto	u677
   854     077E  0BAD               	decfsz	??_main+1,f
   855     077F  2F7C               	goto	u677
   856     0780                     l1245:
   857                           
   858                           ;main.c: 100:        spiWrite(0);
   859     0780  3000               	movlw	0
   860     0781  120A  118A  2455  120A  118A  	fcall	_spiWrite
   861     0786                     l1247:
   862                           
   863                           ;main.c: 101:        TEMP = spiRead();
   864     0786  120A  118A  2462  120A  118A  	fcall	_spiRead
   865     078B  1283               	bcf	3,5	;RP0=0, select bank0
   866     078C  1303               	bcf	3,6	;RP1=0, select bank0
   867     078D  00AF               	movwf	_TEMP
   868     078E                     l1249:
   869                           
   870                           ;main.c: 103:        _delay((unsigned long)((1)*(8000000/4000.0)));
   871     078E  3003               	movlw	3
   872     078F  1283               	bcf	3,5	;RP0=0, select bank0
   873     0790  1303               	bcf	3,6	;RP1=0, select bank0
   874     0791  00AD               	movwf	??_main+1
   875     0792  3097               	movlw	151
   876     0793  00AC               	movwf	??_main
   877     0794                     u687:
   878     0794  0BAC               	decfsz	??_main,f
   879     0795  2F94               	goto	u687
   880     0796  0BAD               	decfsz	??_main+1,f
   881     0797  2F94               	goto	u687
   882     0798                     l1251:
   883                           
   884                           ;main.c: 104:        PORTCbits.RC1 = 1;
   885     0798  1283               	bcf	3,5	;RP0=0, select bank0
   886     0799  1303               	bcf	3,6	;RP1=0, select bank0
   887     079A  1487               	bsf	7,1	;volatile
   888     079B                     l1253:
   889                           
   890                           ;main.c: 106:        _delay((unsigned long)((250)*(8000000/4000.0)));
   891     079B  3003               	movlw	3
   892     079C  1283               	bcf	3,5	;RP0=0, select bank0
   893     079D  1303               	bcf	3,6	;RP1=0, select bank0
   894     079E  00AE               	movwf	??_main+2
   895     079F  308A               	movlw	138
   896     07A0  00AD               	movwf	??_main+1
   897     07A1  3055               	movlw	85
   898     07A2  00AC               	movwf	??_main
   899     07A3                     u697:
   900     07A3  0BAC               	decfsz	??_main,f
   901     07A4  2FA3               	goto	u697
   902     07A5  0BAD               	decfsz	??_main+1,f
   903     07A6  2FA3               	goto	u697
   904     07A7  0BAE               	decfsz	??_main+2,f
   905     07A8  2FA3               	goto	u697
   906     07A9                     l1255:
   907                           
   908                           ;main.c: 111:        LcdALL_Set_Cursor(2,1);
   909     07A9  01F6               	clrf	LcdALL_Set_Cursor@b
   910     07AA  0AF6               	incf	LcdALL_Set_Cursor@b,f
   911     07AB  3002               	movlw	2
   912     07AC  120A  118A  24B1  120A  118A  	fcall	_LcdALL_Set_Cursor
   913     07B1                     l1257:
   914                           
   915                           ;main.c: 112:        LcdALL_set_value(ADC);
   916     07B1  087D               	movf	_ADC,w
   917     07B2  1283               	bcf	3,5	;RP0=0, select bank0
   918     07B3  1303               	bcf	3,6	;RP1=0, select bank0
   919     07B4  00AC               	movwf	??_main
   920     07B5  01AD               	clrf	??_main+1
   921     07B6  082C               	movf	??_main,w
   922     07B7  00A4               	movwf	LcdALL_set_value@byte_value
   923     07B8  082D               	movf	??_main+1,w
   924     07B9  00A5               	movwf	LcdALL_set_value@byte_value+1
   925     07BA  120A  118A  2622  120A  118A  	fcall	_LcdALL_set_value
   926     07BF                     l1259:
   927                           
   928                           ;main.c: 113:        LcdALL_Write_String("   ");
   929     07BF  3014               	movlw	(low (((STR_3+1)-__stringbase)| (0+32768)))& (0+255)
   930     07C0  120A  118A  24D1  120A  118A  	fcall	_LcdALL_Write_String
   931     07C5                     l1261:
   932                           
   933                           ;main.c: 114:        LcdALL_set_value(CONT);
   934     07C5  1283               	bcf	3,5	;RP0=0, select bank0
   935     07C6  1303               	bcf	3,6	;RP1=0, select bank0
   936     07C7  0830               	movf	_CONT,w
   937     07C8  00AC               	movwf	??_main
   938     07C9  01AD               	clrf	??_main+1
   939     07CA  082C               	movf	??_main,w
   940     07CB  00A4               	movwf	LcdALL_set_value@byte_value
   941     07CC  082D               	movf	??_main+1,w
   942     07CD  00A5               	movwf	LcdALL_set_value@byte_value+1
   943     07CE  120A  118A  2622  120A  118A  	fcall	_LcdALL_set_value
   944     07D3                     l1263:
   945                           
   946                           ;main.c: 115:        LcdALL_Write_String("    ");
   947     07D3  3013               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   948     07D4  120A  118A  24D1  120A  118A  	fcall	_LcdALL_Write_String
   949     07D9                     l1265:
   950                           
   951                           ;main.c: 116:        LcdALL_set_value(TEMP);
   952     07D9  1283               	bcf	3,5	;RP0=0, select bank0
   953     07DA  1303               	bcf	3,6	;RP1=0, select bank0
   954     07DB  082F               	movf	_TEMP,w
   955     07DC  00AC               	movwf	??_main
   956     07DD  01AD               	clrf	??_main+1
   957     07DE  082C               	movf	??_main,w
   958     07DF  00A4               	movwf	LcdALL_set_value@byte_value
   959     07E0  082D               	movf	??_main+1,w
   960     07E1  00A5               	movwf	LcdALL_set_value@byte_value+1
   961     07E2  120A  118A  2622  120A  118A  	fcall	_LcdALL_set_value
   962     07E7                     l1267:
   963                           
   964                           ;main.c: 117:        _delay((unsigned long)((2)*(8000000/4000.0)));
   965     07E7  3006               	movlw	6
   966     07E8  1283               	bcf	3,5	;RP0=0, select bank0
   967     07E9  1303               	bcf	3,6	;RP1=0, select bank0
   968     07EA  00AD               	movwf	??_main+1
   969     07EB  302F               	movlw	47
   970     07EC  00AC               	movwf	??_main
   971     07ED                     u707:
   972     07ED  0BAC               	decfsz	??_main,f
   973     07EE  2FED               	goto	u707
   974     07EF  0BAD               	decfsz	??_main+1,f
   975     07F0  2FED               	goto	u707
   976     07F1  2FF2               	nop2
   977     07F2  2F1F               	goto	l57
   978     07F3  120A  118A  2800   	ljmp	start
   979     07F6                     __end_of_main:
   980                           
   981                           	psect	text1
   982     0455                     __ptext1:	
   983 ;; *************** function _spiWrite *****************
   984 ;; Defined at:
   985 ;;		line 34 in file "SPI.c"
   986 ;; Parameters:    Size  Location     Type
   987 ;;  dat             1    wreg     unsigned char 
   988 ;; Auto vars:     Size  Location     Type
   989 ;;  dat             1    0[COMMON] unsigned char 
   990 ;; Return value:  Size  Location     Type
   991 ;;                  1    wreg      void 
   992 ;; Registers used:
   993 ;;		wreg
   994 ;; Tracked objects:
   995 ;;		On entry : 0/0
   996 ;;		On exit  : 0/0
   997 ;;		Unchanged: 0/0
   998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   999 ;;      Params:         0       0       0       0       0
  1000 ;;      Locals:         1       0       0       0       0
  1001 ;;      Temps:          0       0       0       0       0
  1002 ;;      Totals:         1       0       0       0       0
  1003 ;;Total ram usage:        1 bytes
  1004 ;; Hardware stack levels used: 1
  1005 ;; This function calls:
  1006 ;;		Nothing
  1007 ;; This function is called by:
  1008 ;;		_main
  1009 ;; This function uses a non-reentrant model
  1010 ;;
  1011                           
  1012     0455                     _spiWrite:	
  1013                           ;psect for function _spiWrite
  1014                           
  1015                           
  1016                           ;incstack = 0
  1017                           ; Regs used in _spiWrite: [wreg]
  1018                           ;spiWrite@dat stored from wreg
  1019     0455  00F0               	movwf	spiWrite@dat
  1020     0456                     l1203:
  1021                           
  1022                           ;SPI.c: 34: void spiWrite(char dat);SPI.c: 35: {;SPI.c: 36:     SSPBUF = dat;
  1023     0456  0870               	movf	spiWrite@dat,w
  1024     0457  1283               	bcf	3,5	;RP0=0, select bank0
  1025     0458  1303               	bcf	3,6	;RP1=0, select bank0
  1026     0459  0093               	movwf	19	;volatile
  1027     045A                     l92:
  1028     045A  0008               	return
  1029     045B                     __end_of_spiWrite:
  1030                           
  1031                           	psect	text2
  1032     0462                     __ptext2:	
  1033 ;; *************** function _spiRead *****************
  1034 ;; Defined at:
  1035 ;;		line 47 in file "SPI.c"
  1036 ;; Parameters:    Size  Location     Type
  1037 ;;		None
  1038 ;; Auto vars:     Size  Location     Type
  1039 ;;		None
  1040 ;; Return value:  Size  Location     Type
  1041 ;;                  1    wreg      unsigned char 
  1042 ;; Registers used:
  1043 ;;		wreg, status,2, status,0, pclath, cstack
  1044 ;; Tracked objects:
  1045 ;;		On entry : 0/0
  1046 ;;		On exit  : 0/0
  1047 ;;		Unchanged: 0/0
  1048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1049 ;;      Params:         0       0       0       0       0
  1050 ;;      Locals:         0       0       0       0       0
  1051 ;;      Temps:          0       0       0       0       0
  1052 ;;      Totals:         0       0       0       0       0
  1053 ;;Total ram usage:        0 bytes
  1054 ;; Hardware stack levels used: 1
  1055 ;; Hardware stack levels required when called: 1
  1056 ;; This function calls:
  1057 ;;		_spiReceiveWait
  1058 ;; This function is called by:
  1059 ;;		_main
  1060 ;; This function uses a non-reentrant model
  1061 ;;
  1062                           
  1063     0462                     _spiRead:	
  1064                           ;psect for function _spiRead
  1065                           
  1066     0462                     l1205:	
  1067                           ;incstack = 0
  1068                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  1069                           
  1070                           
  1071                           ;SPI.c: 49:     spiReceiveWait();
  1072     0462  120A  118A  245B  120A  118A  	fcall	_spiReceiveWait
  1073     0467                     l1207:
  1074                           
  1075                           ;SPI.c: 50:     return(SSPBUF);
  1076     0467  1283               	bcf	3,5	;RP0=0, select bank0
  1077     0468  1303               	bcf	3,6	;RP1=0, select bank0
  1078     0469  0813               	movf	19,w	;volatile
  1079     046A                     l100:
  1080     046A  0008               	return
  1081     046B                     __end_of_spiRead:
  1082                           
  1083                           	psect	text3
  1084     045B                     __ptext3:	
  1085 ;; *************** function _spiReceiveWait *****************
  1086 ;; Defined at:
  1087 ;;		line 29 in file "SPI.c"
  1088 ;; Parameters:    Size  Location     Type
  1089 ;;		None
  1090 ;; Auto vars:     Size  Location     Type
  1091 ;;		None
  1092 ;; Return value:  Size  Location     Type
  1093 ;;                  1    wreg      void 
  1094 ;; Registers used:
  1095 ;;		None
  1096 ;; Tracked objects:
  1097 ;;		On entry : 0/0
  1098 ;;		On exit  : 0/0
  1099 ;;		Unchanged: 0/0
  1100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1101 ;;      Params:         0       0       0       0       0
  1102 ;;      Locals:         0       0       0       0       0
  1103 ;;      Temps:          0       0       0       0       0
  1104 ;;      Totals:         0       0       0       0       0
  1105 ;;Total ram usage:        0 bytes
  1106 ;; Hardware stack levels used: 1
  1107 ;; This function calls:
  1108 ;;		Nothing
  1109 ;; This function is called by:
  1110 ;;		_spiRead
  1111 ;; This function uses a non-reentrant model
  1112 ;;
  1113                           
  1114     045B                     _spiReceiveWait:	
  1115                           ;psect for function _spiReceiveWait
  1116                           
  1117     045B                     l1041:	
  1118                           ;incstack = 0
  1119                           ; Regs used in _spiReceiveWait: []
  1120                           
  1121     045B                     l86:	
  1122                           ;SPI.c: 31:     while ( !SSPSTATbits.BF );
  1123                           
  1124     045B  1683               	bsf	3,5	;RP0=1, select bank1
  1125     045C  1303               	bcf	3,6	;RP1=0, select bank1
  1126     045D  1C14               	btfss	20,0	;volatile
  1127     045E  2C60               	goto	u401
  1128     045F  2C61               	goto	u400
  1129     0460                     u401:
  1130     0460  2C5B               	goto	l86
  1131     0461                     u400:
  1132     0461                     l89:
  1133     0461  0008               	return
  1134     0462                     __end_of_spiReceiveWait:
  1135                           
  1136                           	psect	text4
  1137     04F6                     __ptext4:	
  1138 ;; *************** function _setup *****************
  1139 ;; Defined at:
  1140 ;;		line 124 in file "main.c"
  1141 ;; Parameters:    Size  Location     Type
  1142 ;;		None
  1143 ;; Auto vars:     Size  Location     Type
  1144 ;;		None
  1145 ;; Return value:  Size  Location     Type
  1146 ;;                  1    wreg      void 
  1147 ;; Registers used:
  1148 ;;		wreg, status,2, status,0, pclath, cstack
  1149 ;; Tracked objects:
  1150 ;;		On entry : 0/0
  1151 ;;		On exit  : 0/0
  1152 ;;		Unchanged: 0/0
  1153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1154 ;;      Params:         0       0       0       0       0
  1155 ;;      Locals:         0       0       0       0       0
  1156 ;;      Temps:          0       0       0       0       0
  1157 ;;      Totals:         0       0       0       0       0
  1158 ;;Total ram usage:        0 bytes
  1159 ;; Hardware stack levels used: 1
  1160 ;; Hardware stack levels required when called: 1
  1161 ;; This function calls:
  1162 ;;		_spiInit
  1163 ;; This function is called by:
  1164 ;;		_main
  1165 ;; This function uses a non-reentrant model
  1166 ;;
  1167                           
  1168     04F6                     _setup:	
  1169                           ;psect for function _setup
  1170                           
  1171     04F6                     l1145:	
  1172                           ;incstack = 0
  1173                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
  1174                           
  1175                           
  1176                           ;main.c: 126:     OSCCONbits.IRCF = 0b111;
  1177     04F6  3070               	movlw	112
  1178     04F7  1683               	bsf	3,5	;RP0=1, select bank1
  1179     04F8  1303               	bcf	3,6	;RP1=0, select bank1
  1180     04F9  048F               	iorwf	15,f	;volatile
  1181     04FA                     l1147:
  1182                           
  1183                           ;main.c: 127:     OSCCONbits.SCS = 1;
  1184     04FA  140F               	bsf	15,0	;volatile
  1185     04FB                     l1149:
  1186                           
  1187                           ;main.c: 129:     ANSEL = 0;
  1188     04FB  1683               	bsf	3,5	;RP0=1, select bank3
  1189     04FC  1703               	bsf	3,6	;RP1=1, select bank3
  1190     04FD  0188               	clrf	8	;volatile
  1191     04FE                     l1151:
  1192                           
  1193                           ;main.c: 130:     TRISA = 0;
  1194     04FE  1683               	bsf	3,5	;RP0=1, select bank1
  1195     04FF  1303               	bcf	3,6	;RP1=0, select bank1
  1196     0500  0185               	clrf	5	;volatile
  1197     0501                     l1153:
  1198                           
  1199                           ;main.c: 131:     ANSELH = 0;
  1200     0501  1683               	bsf	3,5	;RP0=1, select bank3
  1201     0502  1703               	bsf	3,6	;RP1=1, select bank3
  1202     0503  0189               	clrf	9	;volatile
  1203     0504                     l1155:
  1204                           
  1205                           ;main.c: 132:     TRISC2 = 0;
  1206     0504  1683               	bsf	3,5	;RP0=1, select bank1
  1207     0505  1303               	bcf	3,6	;RP1=0, select bank1
  1208     0506  1107               	bcf	7,2	;volatile
  1209     0507                     l1157:
  1210                           
  1211                           ;main.c: 133:     TRISC1 = 0;
  1212     0507  1087               	bcf	7,1	;volatile
  1213     0508                     l1159:
  1214                           
  1215                           ;main.c: 134:     TRISB = 0;
  1216     0508  0186               	clrf	6	;volatile
  1217     0509                     l1161:
  1218                           
  1219                           ;main.c: 135:     TRISD = 0;
  1220     0509  0188               	clrf	8	;volatile
  1221     050A                     l1163:
  1222                           
  1223                           ;main.c: 136:     PORTB = 0;
  1224     050A  1283               	bcf	3,5	;RP0=0, select bank0
  1225     050B  1303               	bcf	3,6	;RP1=0, select bank0
  1226     050C  0186               	clrf	6	;volatile
  1227     050D                     l1165:
  1228                           
  1229                           ;main.c: 137:     PORTD = 0;
  1230     050D  0188               	clrf	8	;volatile
  1231     050E                     l1167:
  1232                           
  1233                           ;main.c: 138:     TRISE = 0;
  1234     050E  1683               	bsf	3,5	;RP0=1, select bank1
  1235     050F  1303               	bcf	3,6	;RP1=0, select bank1
  1236     0510  0189               	clrf	9	;volatile
  1237     0511                     l1169:
  1238                           
  1239                           ;main.c: 139:     PORTCbits.RC2 = 1;
  1240     0511  1283               	bcf	3,5	;RP0=0, select bank0
  1241     0512  1303               	bcf	3,6	;RP1=0, select bank0
  1242     0513  1507               	bsf	7,2	;volatile
  1243     0514                     l1171:
  1244                           
  1245                           ;main.c: 140:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_LO
      +                          W, SPI_IDLE_2_ACTIVE);
  1246     0514  01F0               	clrf	spiInit@sDataSample
  1247     0515  01F1               	clrf	spiInit@sClockIdle
  1248     0516  01F2               	clrf	spiInit@sTransmitEdge
  1249     0517  3020               	movlw	32
  1250     0518  120A  118A  2481  120A  118A  	fcall	_spiInit
  1251     051D                     l66:
  1252     051D  0008               	return
  1253     051E                     __end_of_setup:
  1254                           
  1255                           	psect	text5
  1256     0481                     __ptext5:	
  1257 ;; *************** function _spiInit *****************
  1258 ;; Defined at:
  1259 ;;		line 12 in file "SPI.c"
  1260 ;; Parameters:    Size  Location     Type
  1261 ;;  sType           1    wreg     enum E1292
  1262 ;;  sDataSample     1    0[COMMON] enum E1300
  1263 ;;  sClockIdle      1    1[COMMON] enum E1304
  1264 ;;  sTransmitEdg    1    2[COMMON] enum E1308
  1265 ;; Auto vars:     Size  Location     Type
  1266 ;;  sType           1    3[COMMON] enum E1292
  1267 ;; Return value:  Size  Location     Type
  1268 ;;                  1    wreg      void 
  1269 ;; Registers used:
  1270 ;;		wreg, status,2, status,0
  1271 ;; Tracked objects:
  1272 ;;		On entry : 0/0
  1273 ;;		On exit  : 0/0
  1274 ;;		Unchanged: 0/0
  1275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1276 ;;      Params:         3       0       0       0       0
  1277 ;;      Locals:         1       0       0       0       0
  1278 ;;      Temps:          0       0       0       0       0
  1279 ;;      Totals:         4       0       0       0       0
  1280 ;;Total ram usage:        4 bytes
  1281 ;; Hardware stack levels used: 1
  1282 ;; This function calls:
  1283 ;;		Nothing
  1284 ;; This function is called by:
  1285 ;;		_setup
  1286 ;; This function uses a non-reentrant model
  1287 ;;
  1288                           
  1289     0481                     _spiInit:	
  1290                           ;psect for function _spiInit
  1291                           
  1292                           
  1293                           ;incstack = 0
  1294                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  1295                           ;spiInit@sType stored from wreg
  1296     0481  00F3               	movwf	spiInit@sType
  1297     0482                     l1031:
  1298                           
  1299                           ;SPI.c: 12: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 13: {;SPI.c: 14:     TRISC5 = 0;
  1300     0482  1683               	bsf	3,5	;RP0=1, select bank1
  1301     0483  1303               	bcf	3,6	;RP1=0, select bank1
  1302     0484  1287               	bcf	7,5	;volatile
  1303                           
  1304                           ;SPI.c: 15:     if(sType & 0b00000100)
  1305     0485  1D73               	btfss	spiInit@sType,2
  1306     0486  2C88               	goto	u391
  1307     0487  2C89               	goto	u390
  1308     0488                     u391:
  1309     0488  2C8D               	goto	l1037
  1310     0489                     u390:
  1311     0489                     l1033:
  1312                           
  1313                           ;SPI.c: 16:     {;SPI.c: 17:         SSPSTAT = sTransmitEdge;
  1314     0489  0872               	movf	spiInit@sTransmitEdge,w
  1315     048A  0094               	movwf	20	;volatile
  1316     048B                     l1035:
  1317                           
  1318                           ;SPI.c: 18:         TRISC3 = 1;
  1319     048B  1587               	bsf	7,3	;volatile
  1320                           
  1321                           ;SPI.c: 19:     }
  1322     048C  2C91               	goto	l82
  1323     048D                     l1037:
  1324                           
  1325                           ;SPI.c: 21:     {;SPI.c: 22:         SSPSTAT = sDataSample | sTransmitEdge;
  1326     048D  0870               	movf	spiInit@sDataSample,w
  1327     048E  0472               	iorwf	spiInit@sTransmitEdge,w
  1328     048F  0094               	movwf	20	;volatile
  1329     0490                     l1039:
  1330                           
  1331                           ;SPI.c: 23:         TRISC3 = 0;
  1332     0490  1187               	bcf	7,3	;volatile
  1333     0491                     l82:	
  1334                           ;SPI.c: 24:     }
  1335                           
  1336                           
  1337                           ;SPI.c: 26:     SSPCON = sType | sClockIdle;
  1338     0491  0873               	movf	spiInit@sType,w
  1339     0492  0471               	iorwf	spiInit@sClockIdle,w
  1340     0493  1283               	bcf	3,5	;RP0=0, select bank0
  1341     0494  1303               	bcf	3,6	;RP1=0, select bank0
  1342     0495  0094               	movwf	20	;volatile
  1343     0496                     l83:
  1344     0496  0008               	return
  1345     0497                     __end_of_spiInit:
  1346                           
  1347                           	psect	text6
  1348     0622                     __ptext6:	
  1349 ;; *************** function _LcdALL_set_value *****************
  1350 ;; Defined at:
  1351 ;;		line 87 in file "LCD_ALL.c"
  1352 ;; Parameters:    Size  Location     Type
  1353 ;;  byte_value      2    4[BANK0 ] int 
  1354 ;; Auto vars:     Size  Location     Type
  1355 ;;  unidades        2   10[BANK0 ] int 
  1356 ;;  decenas         2    8[BANK0 ] int 
  1357 ;;  centenas        2    6[BANK0 ] int 
  1358 ;; Return value:  Size  Location     Type
  1359 ;;                  1    wreg      unsigned char 
  1360 ;; Registers used:
  1361 ;;		wreg, status,2, status,0, pclath, cstack
  1362 ;; Tracked objects:
  1363 ;;		On entry : 0/0
  1364 ;;		On exit  : 0/0
  1365 ;;		Unchanged: 0/0
  1366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1367 ;;      Params:         0       2       0       0       0
  1368 ;;      Locals:         0       6       0       0       0
  1369 ;;      Temps:          0       0       0       0       0
  1370 ;;      Totals:         0       8       0       0       0
  1371 ;;Total ram usage:        8 bytes
  1372 ;; Hardware stack levels used: 1
  1373 ;; Hardware stack levels required when called: 2
  1374 ;; This function calls:
  1375 ;;		_LcdALL_Write_Char
  1376 ;;		___awdiv
  1377 ;;		___awmod
  1378 ;; This function is called by:
  1379 ;;		_main
  1380 ;; This function uses a non-reentrant model
  1381 ;;
  1382                           
  1383     0622                     _LcdALL_set_value:	
  1384                           ;psect for function _LcdALL_set_value
  1385                           
  1386     0622                     l1211:	
  1387                           ;incstack = 0
  1388                           ; Regs used in _LcdALL_set_value: [wreg+status,2+status,0+pclath+cstack]
  1389                           
  1390                           
  1391                           ;LCD_ALL.c: 88:     int centenas = (byte_value / 100 + 48);
  1392     0622  3064               	movlw	100
  1393     0623  00F7               	movwf	___awdiv@divisor
  1394     0624  3000               	movlw	0
  1395     0625  00F8               	movwf	___awdiv@divisor+1
  1396     0626  1283               	bcf	3,5	;RP0=0, select bank0
  1397     0627  1303               	bcf	3,6	;RP1=0, select bank0
  1398     0628  0825               	movf	LcdALL_set_value@byte_value+1,w
  1399     0629  00FA               	movwf	___awdiv@dividend+1
  1400     062A  0824               	movf	LcdALL_set_value@byte_value,w
  1401     062B  00F9               	movwf	___awdiv@dividend
  1402     062C  120A  118A  25B9  120A  118A  	fcall	___awdiv
  1403     0631  0877               	movf	?___awdiv,w
  1404     0632  3E30               	addlw	48
  1405     0633  1283               	bcf	3,5	;RP0=0, select bank0
  1406     0634  1303               	bcf	3,6	;RP1=0, select bank0
  1407     0635  00A6               	movwf	LcdALL_set_value@centenas
  1408     0636  0878               	movf	?___awdiv+1,w
  1409     0637  1803               	skipnc
  1410     0638  3E01               	addlw	1
  1411     0639  3E00               	addlw	0
  1412     063A  00A7               	movwf	LcdALL_set_value@centenas+1
  1413                           
  1414                           ;LCD_ALL.c: 89:     int decenas = ((byte_value%100)/10)+48;
  1415     063B  300A               	movlw	10
  1416     063C  00F7               	movwf	___awdiv@divisor
  1417     063D  3000               	movlw	0
  1418     063E  00F8               	movwf	___awdiv@divisor+1
  1419     063F  0825               	movf	LcdALL_set_value@byte_value+1,w
  1420     0640  00F3               	movwf	___awmod@dividend+1
  1421     0641  0824               	movf	LcdALL_set_value@byte_value,w
  1422     0642  00F2               	movwf	___awmod@dividend
  1423     0643  3064               	movlw	100
  1424     0644  00F0               	movwf	___awmod@divisor
  1425     0645  3000               	movlw	0
  1426     0646  00F1               	movwf	___awmod@divisor+1
  1427     0647  120A  118A  2560  120A  118A  	fcall	___awmod
  1428     064C  0871               	movf	?___awmod+1,w
  1429     064D  00FA               	movwf	___awdiv@dividend+1
  1430     064E  0870               	movf	?___awmod,w
  1431     064F  00F9               	movwf	___awdiv@dividend
  1432     0650  120A  118A  25B9  120A  118A  	fcall	___awdiv
  1433     0655  0877               	movf	?___awdiv,w
  1434     0656  3E30               	addlw	48
  1435     0657  1283               	bcf	3,5	;RP0=0, select bank0
  1436     0658  1303               	bcf	3,6	;RP1=0, select bank0
  1437     0659  00A8               	movwf	LcdALL_set_value@decenas
  1438     065A  0878               	movf	?___awdiv+1,w
  1439     065B  1803               	skipnc
  1440     065C  3E01               	addlw	1
  1441     065D  3E00               	addlw	0
  1442     065E  00A9               	movwf	LcdALL_set_value@decenas+1
  1443                           
  1444                           ;LCD_ALL.c: 90:     int unidades = (byte_value%10)+48;
  1445     065F  300A               	movlw	10
  1446     0660  00F0               	movwf	___awmod@divisor
  1447     0661  3000               	movlw	0
  1448     0662  00F1               	movwf	___awmod@divisor+1
  1449     0663  0825               	movf	LcdALL_set_value@byte_value+1,w
  1450     0664  00F3               	movwf	___awmod@dividend+1
  1451     0665  0824               	movf	LcdALL_set_value@byte_value,w
  1452     0666  00F2               	movwf	___awmod@dividend
  1453     0667  120A  118A  2560  120A  118A  	fcall	___awmod
  1454     066C  0870               	movf	?___awmod,w
  1455     066D  3E30               	addlw	48
  1456     066E  1283               	bcf	3,5	;RP0=0, select bank0
  1457     066F  1303               	bcf	3,6	;RP1=0, select bank0
  1458     0670  00AA               	movwf	LcdALL_set_value@unidades
  1459     0671  0871               	movf	?___awmod+1,w
  1460     0672  1803               	skipnc
  1461     0673  3E01               	addlw	1
  1462     0674  3E00               	addlw	0
  1463     0675  00AB               	movwf	LcdALL_set_value@unidades+1
  1464                           
  1465                           ;LCD_ALL.c: 91:     LcdALL_Write_Char(centenas);
  1466     0676  0826               	movf	LcdALL_set_value@centenas,w
  1467     0677  120A  118A  246B  120A  118A  	fcall	_LcdALL_Write_Char
  1468                           
  1469                           ;LCD_ALL.c: 92:     LcdALL_Write_Char(decenas);
  1470     067C  1283               	bcf	3,5	;RP0=0, select bank0
  1471     067D  1303               	bcf	3,6	;RP1=0, select bank0
  1472     067E  0828               	movf	LcdALL_set_value@decenas,w
  1473     067F  120A  118A  246B  120A  118A  	fcall	_LcdALL_Write_Char
  1474                           
  1475                           ;LCD_ALL.c: 93:     LcdALL_Write_Char(unidades);
  1476     0684  1283               	bcf	3,5	;RP0=0, select bank0
  1477     0685  1303               	bcf	3,6	;RP1=0, select bank0
  1478     0686  082A               	movf	LcdALL_set_value@unidades,w
  1479     0687  120A  118A  246B  120A  118A  	fcall	_LcdALL_Write_Char
  1480     068C                     l144:
  1481     068C  0008               	return
  1482     068D                     __end_of_LcdALL_set_value:
  1483                           
  1484                           	psect	text7
  1485     0560                     __ptext7:	
  1486 ;; *************** function ___awmod *****************
  1487 ;; Defined at:
  1488 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awmod.c"
  1489 ;; Parameters:    Size  Location     Type
  1490 ;;  divisor         2    0[COMMON] int 
  1491 ;;  dividend        2    2[COMMON] int 
  1492 ;; Auto vars:     Size  Location     Type
  1493 ;;  sign            1    6[COMMON] unsigned char 
  1494 ;;  counter         1    5[COMMON] unsigned char 
  1495 ;; Return value:  Size  Location     Type
  1496 ;;                  2    0[COMMON] int 
  1497 ;; Registers used:
  1498 ;;		wreg, status,2, status,0
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 0/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1504 ;;      Params:         4       0       0       0       0
  1505 ;;      Locals:         2       0       0       0       0
  1506 ;;      Temps:          1       0       0       0       0
  1507 ;;      Totals:         7       0       0       0       0
  1508 ;;Total ram usage:        7 bytes
  1509 ;; Hardware stack levels used: 1
  1510 ;; This function calls:
  1511 ;;		Nothing
  1512 ;; This function is called by:
  1513 ;;		_LcdALL_set_value
  1514 ;; This function uses a non-reentrant model
  1515 ;;
  1516                           
  1517     0560                     ___awmod:	
  1518                           ;psect for function ___awmod
  1519                           
  1520     0560                     l1107:	
  1521                           ;incstack = 0
  1522                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1523                           
  1524     0560  01F6               	clrf	___awmod@sign
  1525     0561                     l1109:
  1526     0561  1FF3               	btfss	___awmod@dividend+1,7
  1527     0562  2D64               	goto	u511
  1528     0563  2D65               	goto	u510
  1529     0564                     u511:
  1530     0564  2D6C               	goto	l1115
  1531     0565                     u510:
  1532     0565                     l1111:
  1533     0565  09F2               	comf	___awmod@dividend,f
  1534     0566  09F3               	comf	___awmod@dividend+1,f
  1535     0567  0AF2               	incf	___awmod@dividend,f
  1536     0568  1903               	skipnz
  1537     0569  0AF3               	incf	___awmod@dividend+1,f
  1538     056A                     l1113:
  1539     056A  01F6               	clrf	___awmod@sign
  1540     056B  0AF6               	incf	___awmod@sign,f
  1541     056C                     l1115:
  1542     056C  1FF1               	btfss	___awmod@divisor+1,7
  1543     056D  2D6F               	goto	u521
  1544     056E  2D70               	goto	u520
  1545     056F                     u521:
  1546     056F  2D75               	goto	l1119
  1547     0570                     u520:
  1548     0570                     l1117:
  1549     0570  09F0               	comf	___awmod@divisor,f
  1550     0571  09F1               	comf	___awmod@divisor+1,f
  1551     0572  0AF0               	incf	___awmod@divisor,f
  1552     0573  1903               	skipnz
  1553     0574  0AF1               	incf	___awmod@divisor+1,f
  1554     0575                     l1119:
  1555     0575  0870               	movf	___awmod@divisor,w
  1556     0576  0471               	iorwf	___awmod@divisor+1,w
  1557     0577  1903               	btfsc	3,2
  1558     0578  2D7A               	goto	u531
  1559     0579  2D7B               	goto	u530
  1560     057A                     u531:
  1561     057A  2DAA               	goto	l1137
  1562     057B                     u530:
  1563     057B                     l1121:
  1564     057B  01F5               	clrf	___awmod@counter
  1565     057C  0AF5               	incf	___awmod@counter,f
  1566     057D  2D89               	goto	l1127
  1567     057E                     l1123:
  1568     057E  3001               	movlw	1
  1569     057F                     u545:
  1570     057F  1003               	clrc
  1571     0580  0DF0               	rlf	___awmod@divisor,f
  1572     0581  0DF1               	rlf	___awmod@divisor+1,f
  1573     0582  3EFF               	addlw	-1
  1574     0583  1D03               	skipz
  1575     0584  2D7F               	goto	u545
  1576     0585                     l1125:
  1577     0585  3001               	movlw	1
  1578     0586  00F4               	movwf	??___awmod
  1579     0587  0874               	movf	??___awmod,w
  1580     0588  07F5               	addwf	___awmod@counter,f
  1581     0589                     l1127:
  1582     0589  1FF1               	btfss	___awmod@divisor+1,7
  1583     058A  2D8C               	goto	u551
  1584     058B  2D8D               	goto	u550
  1585     058C                     u551:
  1586     058C  2D7E               	goto	l1123
  1587     058D                     u550:
  1588     058D                     l1129:
  1589     058D  0871               	movf	___awmod@divisor+1,w
  1590     058E  0273               	subwf	___awmod@dividend+1,w
  1591     058F  1D03               	skipz
  1592     0590  2D93               	goto	u565
  1593     0591  0870               	movf	___awmod@divisor,w
  1594     0592  0272               	subwf	___awmod@dividend,w
  1595     0593                     u565:
  1596     0593  1C03               	skipc
  1597     0594  2D96               	goto	u561
  1598     0595  2D97               	goto	u560
  1599     0596                     u561:
  1600     0596  2D9D               	goto	l1133
  1601     0597                     u560:
  1602     0597                     l1131:
  1603     0597  0870               	movf	___awmod@divisor,w
  1604     0598  02F2               	subwf	___awmod@dividend,f
  1605     0599  0871               	movf	___awmod@divisor+1,w
  1606     059A  1C03               	skipc
  1607     059B  03F3               	decf	___awmod@dividend+1,f
  1608     059C  02F3               	subwf	___awmod@dividend+1,f
  1609     059D                     l1133:
  1610     059D  3001               	movlw	1
  1611     059E                     u575:
  1612     059E  1003               	clrc
  1613     059F  0CF1               	rrf	___awmod@divisor+1,f
  1614     05A0  0CF0               	rrf	___awmod@divisor,f
  1615     05A1  3EFF               	addlw	-1
  1616     05A2  1D03               	skipz
  1617     05A3  2D9E               	goto	u575
  1618     05A4                     l1135:
  1619     05A4  3001               	movlw	1
  1620     05A5  02F5               	subwf	___awmod@counter,f
  1621     05A6  1D03               	btfss	3,2
  1622     05A7  2DA9               	goto	u581
  1623     05A8  2DAA               	goto	u580
  1624     05A9                     u581:
  1625     05A9  2D8D               	goto	l1129
  1626     05AA                     u580:
  1627     05AA                     l1137:
  1628     05AA  0876               	movf	___awmod@sign,w
  1629     05AB  1903               	btfsc	3,2
  1630     05AC  2DAE               	goto	u591
  1631     05AD  2DAF               	goto	u590
  1632     05AE                     u591:
  1633     05AE  2DB4               	goto	l1141
  1634     05AF                     u590:
  1635     05AF                     l1139:
  1636     05AF  09F2               	comf	___awmod@dividend,f
  1637     05B0  09F3               	comf	___awmod@dividend+1,f
  1638     05B1  0AF2               	incf	___awmod@dividend,f
  1639     05B2  1903               	skipnz
  1640     05B3  0AF3               	incf	___awmod@dividend+1,f
  1641     05B4                     l1141:
  1642     05B4  0873               	movf	___awmod@dividend+1,w
  1643     05B5  00F1               	movwf	?___awmod+1
  1644     05B6  0872               	movf	___awmod@dividend,w
  1645     05B7  00F0               	movwf	?___awmod
  1646     05B8                     l399:
  1647     05B8  0008               	return
  1648     05B9                     __end_of___awmod:
  1649                           
  1650                           	psect	text8
  1651     05B9                     __ptext8:	
  1652 ;; *************** function ___awdiv *****************
  1653 ;; Defined at:
  1654 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awdiv.c"
  1655 ;; Parameters:    Size  Location     Type
  1656 ;;  divisor         2    7[COMMON] int 
  1657 ;;  dividend        2    9[COMMON] int 
  1658 ;; Auto vars:     Size  Location     Type
  1659 ;;  quotient        2    2[BANK0 ] int 
  1660 ;;  sign            1    1[BANK0 ] unsigned char 
  1661 ;;  counter         1    0[BANK0 ] unsigned char 
  1662 ;; Return value:  Size  Location     Type
  1663 ;;                  2    7[COMMON] int 
  1664 ;; Registers used:
  1665 ;;		wreg, status,2, status,0
  1666 ;; Tracked objects:
  1667 ;;		On entry : 0/0
  1668 ;;		On exit  : 0/0
  1669 ;;		Unchanged: 0/0
  1670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1671 ;;      Params:         4       0       0       0       0
  1672 ;;      Locals:         0       4       0       0       0
  1673 ;;      Temps:          1       0       0       0       0
  1674 ;;      Totals:         5       4       0       0       0
  1675 ;;Total ram usage:        9 bytes
  1676 ;; Hardware stack levels used: 1
  1677 ;; This function calls:
  1678 ;;		Nothing
  1679 ;; This function is called by:
  1680 ;;		_LcdALL_set_value
  1681 ;; This function uses a non-reentrant model
  1682 ;;
  1683                           
  1684     05B9                     ___awdiv:	
  1685                           ;psect for function ___awdiv
  1686                           
  1687     05B9                     l1063:	
  1688                           ;incstack = 0
  1689                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1690                           
  1691     05B9  1283               	bcf	3,5	;RP0=0, select bank0
  1692     05BA  1303               	bcf	3,6	;RP1=0, select bank0
  1693     05BB  01A1               	clrf	___awdiv@sign
  1694     05BC                     l1065:
  1695     05BC  1FF8               	btfss	___awdiv@divisor+1,7
  1696     05BD  2DBF               	goto	u411
  1697     05BE  2DC0               	goto	u410
  1698     05BF                     u411:
  1699     05BF  2DC7               	goto	l1071
  1700     05C0                     u410:
  1701     05C0                     l1067:
  1702     05C0  09F7               	comf	___awdiv@divisor,f
  1703     05C1  09F8               	comf	___awdiv@divisor+1,f
  1704     05C2  0AF7               	incf	___awdiv@divisor,f
  1705     05C3  1903               	skipnz
  1706     05C4  0AF8               	incf	___awdiv@divisor+1,f
  1707     05C5                     l1069:
  1708     05C5  01A1               	clrf	___awdiv@sign
  1709     05C6  0AA1               	incf	___awdiv@sign,f
  1710     05C7                     l1071:
  1711     05C7  1FFA               	btfss	___awdiv@dividend+1,7
  1712     05C8  2DCA               	goto	u421
  1713     05C9  2DCB               	goto	u420
  1714     05CA                     u421:
  1715     05CA  2DD4               	goto	l1077
  1716     05CB                     u420:
  1717     05CB                     l1073:
  1718     05CB  09F9               	comf	___awdiv@dividend,f
  1719     05CC  09FA               	comf	___awdiv@dividend+1,f
  1720     05CD  0AF9               	incf	___awdiv@dividend,f
  1721     05CE  1903               	skipnz
  1722     05CF  0AFA               	incf	___awdiv@dividend+1,f
  1723     05D0                     l1075:
  1724     05D0  3001               	movlw	1
  1725     05D1  00FB               	movwf	??___awdiv
  1726     05D2  087B               	movf	??___awdiv,w
  1727     05D3  06A1               	xorwf	___awdiv@sign,f
  1728     05D4                     l1077:
  1729     05D4  01A2               	clrf	___awdiv@quotient
  1730     05D5  01A3               	clrf	___awdiv@quotient+1
  1731     05D6                     l1079:
  1732     05D6  0877               	movf	___awdiv@divisor,w
  1733     05D7  0478               	iorwf	___awdiv@divisor+1,w
  1734     05D8  1903               	btfsc	3,2
  1735     05D9  2DDB               	goto	u431
  1736     05DA  2DDC               	goto	u430
  1737     05DB                     u431:
  1738     05DB  2E13               	goto	l1099
  1739     05DC                     u430:
  1740     05DC                     l1081:
  1741     05DC  01A0               	clrf	___awdiv@counter
  1742     05DD  0AA0               	incf	___awdiv@counter,f
  1743     05DE  2DEA               	goto	l1087
  1744     05DF                     l1083:
  1745     05DF  3001               	movlw	1
  1746     05E0                     u445:
  1747     05E0  1003               	clrc
  1748     05E1  0DF7               	rlf	___awdiv@divisor,f
  1749     05E2  0DF8               	rlf	___awdiv@divisor+1,f
  1750     05E3  3EFF               	addlw	-1
  1751     05E4  1D03               	skipz
  1752     05E5  2DE0               	goto	u445
  1753     05E6                     l1085:
  1754     05E6  3001               	movlw	1
  1755     05E7  00FB               	movwf	??___awdiv
  1756     05E8  087B               	movf	??___awdiv,w
  1757     05E9  07A0               	addwf	___awdiv@counter,f
  1758     05EA                     l1087:
  1759     05EA  1FF8               	btfss	___awdiv@divisor+1,7
  1760     05EB  2DED               	goto	u451
  1761     05EC  2DEE               	goto	u450
  1762     05ED                     u451:
  1763     05ED  2DDF               	goto	l1083
  1764     05EE                     u450:
  1765     05EE                     l1089:
  1766     05EE  3001               	movlw	1
  1767     05EF                     u465:
  1768     05EF  1003               	clrc
  1769     05F0  0DA2               	rlf	___awdiv@quotient,f
  1770     05F1  0DA3               	rlf	___awdiv@quotient+1,f
  1771     05F2  3EFF               	addlw	-1
  1772     05F3  1D03               	skipz
  1773     05F4  2DEF               	goto	u465
  1774     05F5  0878               	movf	___awdiv@divisor+1,w
  1775     05F6  027A               	subwf	___awdiv@dividend+1,w
  1776     05F7  1D03               	skipz
  1777     05F8  2DFB               	goto	u475
  1778     05F9  0877               	movf	___awdiv@divisor,w
  1779     05FA  0279               	subwf	___awdiv@dividend,w
  1780     05FB                     u475:
  1781     05FB  1C03               	skipc
  1782     05FC  2DFE               	goto	u471
  1783     05FD  2DFF               	goto	u470
  1784     05FE                     u471:
  1785     05FE  2E06               	goto	l1095
  1786     05FF                     u470:
  1787     05FF                     l1091:
  1788     05FF  0877               	movf	___awdiv@divisor,w
  1789     0600  02F9               	subwf	___awdiv@dividend,f
  1790     0601  0878               	movf	___awdiv@divisor+1,w
  1791     0602  1C03               	skipc
  1792     0603  03FA               	decf	___awdiv@dividend+1,f
  1793     0604  02FA               	subwf	___awdiv@dividend+1,f
  1794     0605                     l1093:
  1795     0605  1422               	bsf	___awdiv@quotient,0
  1796     0606                     l1095:
  1797     0606  3001               	movlw	1
  1798     0607                     u485:
  1799     0607  1003               	clrc
  1800     0608  0CF8               	rrf	___awdiv@divisor+1,f
  1801     0609  0CF7               	rrf	___awdiv@divisor,f
  1802     060A  3EFF               	addlw	-1
  1803     060B  1D03               	skipz
  1804     060C  2E07               	goto	u485
  1805     060D                     l1097:
  1806     060D  3001               	movlw	1
  1807     060E  02A0               	subwf	___awdiv@counter,f
  1808     060F  1D03               	btfss	3,2
  1809     0610  2E12               	goto	u491
  1810     0611  2E13               	goto	u490
  1811     0612                     u491:
  1812     0612  2DEE               	goto	l1089
  1813     0613                     u490:
  1814     0613                     l1099:
  1815     0613  0821               	movf	___awdiv@sign,w
  1816     0614  1903               	btfsc	3,2
  1817     0615  2E17               	goto	u501
  1818     0616  2E18               	goto	u500
  1819     0617                     u501:
  1820     0617  2E1D               	goto	l1103
  1821     0618                     u500:
  1822     0618                     l1101:
  1823     0618  09A2               	comf	___awdiv@quotient,f
  1824     0619  09A3               	comf	___awdiv@quotient+1,f
  1825     061A  0AA2               	incf	___awdiv@quotient,f
  1826     061B  1903               	skipnz
  1827     061C  0AA3               	incf	___awdiv@quotient+1,f
  1828     061D                     l1103:
  1829     061D  0823               	movf	___awdiv@quotient+1,w
  1830     061E  00F8               	movwf	?___awdiv+1
  1831     061F  0822               	movf	___awdiv@quotient,w
  1832     0620  00F7               	movwf	?___awdiv
  1833     0621                     l386:
  1834     0621  0008               	return
  1835     0622                     __end_of___awdiv:
  1836                           
  1837                           	psect	text9
  1838     04D1                     __ptext9:	
  1839 ;; *************** function _LcdALL_Write_String *****************
  1840 ;; Defined at:
  1841 ;;		line 71 in file "LCD_ALL.c"
  1842 ;; Parameters:    Size  Location     Type
  1843 ;;  a               1    wreg     PTR unsigned char 
  1844 ;;		 -> STR_3(5), STR_2(4), STR_1(18), 
  1845 ;; Auto vars:     Size  Location     Type
  1846 ;;  a               1    7[COMMON] PTR unsigned char 
  1847 ;;		 -> STR_3(5), STR_2(4), STR_1(18), 
  1848 ;;  i               2    5[COMMON] int 
  1849 ;; Return value:  Size  Location     Type
  1850 ;;                  1    wreg      void 
  1851 ;; Registers used:
  1852 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1853 ;; Tracked objects:
  1854 ;;		On entry : 0/0
  1855 ;;		On exit  : 0/0
  1856 ;;		Unchanged: 0/0
  1857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1858 ;;      Params:         0       0       0       0       0
  1859 ;;      Locals:         3       0       0       0       0
  1860 ;;      Temps:          0       0       0       0       0
  1861 ;;      Totals:         3       0       0       0       0
  1862 ;;Total ram usage:        3 bytes
  1863 ;; Hardware stack levels used: 1
  1864 ;; Hardware stack levels required when called: 2
  1865 ;; This function calls:
  1866 ;;		_LcdALL_Write_Char
  1867 ;; This function is called by:
  1868 ;;		_main
  1869 ;; This function uses a non-reentrant model
  1870 ;;
  1871                           
  1872     04D1                     _LcdALL_Write_String:	
  1873                           ;psect for function _LcdALL_Write_String
  1874                           
  1875                           
  1876                           ;incstack = 0
  1877                           ; Regs used in _LcdALL_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1878                           ;LcdALL_Write_String@a stored from wreg
  1879     04D1  00F7               	movwf	LcdALL_Write_String@a
  1880     04D2                     l1195:
  1881                           
  1882                           ;LCD_ALL.c: 72:     int i;;LCD_ALL.c: 73:     for (i = 0; a[i] != '\0'; i++)
  1883     04D2  01F5               	clrf	LcdALL_Write_String@i
  1884     04D3  01F6               	clrf	LcdALL_Write_String@i+1
  1885     04D4  2CE8               	goto	l1201
  1886     04D5                     l1197:
  1887                           
  1888                           ;LCD_ALL.c: 74:         LcdALL_Write_Char(a[i]);
  1889     04D5  0875               	movf	LcdALL_Write_String@i,w
  1890     04D6  0777               	addwf	LcdALL_Write_String@a,w
  1891     04D7  0084               	movwf	4
  1892     04D8  120A  118A  2003  120A  118A  	fcall	stringdir
  1893     04DD  120A  118A  246B  120A  118A  	fcall	_LcdALL_Write_Char
  1894     04E2                     l1199:
  1895     04E2  3001               	movlw	1
  1896     04E3  07F5               	addwf	LcdALL_Write_String@i,f
  1897     04E4  1803               	skipnc
  1898     04E5  0AF6               	incf	LcdALL_Write_String@i+1,f
  1899     04E6  3000               	movlw	0
  1900     04E7  07F6               	addwf	LcdALL_Write_String@i+1,f
  1901     04E8                     l1201:
  1902     04E8  0875               	movf	LcdALL_Write_String@i,w
  1903     04E9  0777               	addwf	LcdALL_Write_String@a,w
  1904     04EA  0084               	movwf	4
  1905     04EB  120A  118A  2003  120A  118A  	fcall	stringdir
  1906     04F0  3A00               	xorlw	0
  1907     04F1  1D03               	skipz
  1908     04F2  2CF4               	goto	u621
  1909     04F3  2CF5               	goto	u620
  1910     04F4                     u621:
  1911     04F4  2CD5               	goto	l1197
  1912     04F5                     u620:
  1913     04F5                     l135:
  1914     04F5  0008               	return
  1915     04F6                     __end_of_LcdALL_Write_String:
  1916                           
  1917                           	psect	text10
  1918     046B                     __ptext10:	
  1919 ;; *************** function _LcdALL_Write_Char *****************
  1920 ;; Defined at:
  1921 ;;		line 63 in file "LCD_ALL.c"
  1922 ;; Parameters:    Size  Location     Type
  1923 ;;  a               1    wreg     unsigned char 
  1924 ;; Auto vars:     Size  Location     Type
  1925 ;;  a               1    4[COMMON] unsigned char 
  1926 ;; Return value:  Size  Location     Type
  1927 ;;                  1    wreg      void 
  1928 ;; Registers used:
  1929 ;;		wreg, status,2, status,0, pclath, cstack
  1930 ;; Tracked objects:
  1931 ;;		On entry : 0/0
  1932 ;;		On exit  : 0/0
  1933 ;;		Unchanged: 0/0
  1934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1935 ;;      Params:         0       0       0       0       0
  1936 ;;      Locals:         1       0       0       0       0
  1937 ;;      Temps:          1       0       0       0       0
  1938 ;;      Totals:         2       0       0       0       0
  1939 ;;Total ram usage:        2 bytes
  1940 ;; Hardware stack levels used: 1
  1941 ;; Hardware stack levels required when called: 1
  1942 ;; This function calls:
  1943 ;;		_LcdALL_Port
  1944 ;; This function is called by:
  1945 ;;		_LcdALL_Write_String
  1946 ;;		_LcdALL_set_value
  1947 ;; This function uses a non-reentrant model
  1948 ;;
  1949                           
  1950     046B                     _LcdALL_Write_Char:	
  1951                           ;psect for function _LcdALL_Write_Char
  1952                           
  1953                           
  1954                           ;incstack = 0
  1955                           ; Regs used in _LcdALL_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1956                           ;LcdALL_Write_Char@a stored from wreg
  1957     046B  00F4               	movwf	LcdALL_Write_Char@a
  1958     046C                     l1053:
  1959                           
  1960                           ;LCD_ALL.c: 64:     PORTEbits.RE0 = 1;
  1961     046C  1283               	bcf	3,5	;RP0=0, select bank0
  1962     046D  1303               	bcf	3,6	;RP1=0, select bank0
  1963     046E  1409               	bsf	9,0	;volatile
  1964     046F                     l1055:
  1965                           
  1966                           ;LCD_ALL.c: 65:     LcdALL_Port(a);
  1967     046F  0874               	movf	LcdALL_Write_Char@a,w
  1968     0470  120A  118A  268D  120A  118A  	fcall	_LcdALL_Port
  1969     0475                     l1057:
  1970                           
  1971                           ;LCD_ALL.c: 66:     PORTEbits.RE1 = 1;
  1972     0475  1283               	bcf	3,5	;RP0=0, select bank0
  1973     0476  1303               	bcf	3,6	;RP1=0, select bank0
  1974     0477  1489               	bsf	9,1	;volatile
  1975     0478                     l1059:
  1976                           
  1977                           ;LCD_ALL.c: 67:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  1978     0478  301A               	movlw	26
  1979     0479  00F3               	movwf	??_LcdALL_Write_Char
  1980     047A                     u717:
  1981     047A  0BF3               	decfsz	??_LcdALL_Write_Char,f
  1982     047B  2C7A               	goto	u717
  1983     047C  0000               	nop
  1984     047D                     l1061:
  1985                           
  1986                           ;LCD_ALL.c: 68:     PORTEbits.RE1 = 0;
  1987     047D  1283               	bcf	3,5	;RP0=0, select bank0
  1988     047E  1303               	bcf	3,6	;RP1=0, select bank0
  1989     047F  1089               	bcf	9,1	;volatile
  1990     0480                     l129:
  1991     0480  0008               	return
  1992     0481                     __end_of_LcdALL_Write_Char:
  1993                           
  1994                           	psect	text11
  1995     04B1                     __ptext11:	
  1996 ;; *************** function _LcdALL_Set_Cursor *****************
  1997 ;; Defined at:
  1998 ;;		line 38 in file "LCD_ALL.c"
  1999 ;; Parameters:    Size  Location     Type
  2000 ;;  a               1    wreg     unsigned char 
  2001 ;;  b               1    6[COMMON] unsigned char 
  2002 ;; Auto vars:     Size  Location     Type
  2003 ;;  a               1    7[COMMON] unsigned char 
  2004 ;;  temp            1    8[COMMON] unsigned char 
  2005 ;; Return value:  Size  Location     Type
  2006 ;;                  1    wreg      void 
  2007 ;; Registers used:
  2008 ;;		wreg, status,2, status,0, pclath, cstack
  2009 ;; Tracked objects:
  2010 ;;		On entry : 0/0
  2011 ;;		On exit  : 0/0
  2012 ;;		Unchanged: 0/0
  2013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2014 ;;      Params:         1       0       0       0       0
  2015 ;;      Locals:         2       0       0       0       0
  2016 ;;      Temps:          0       0       0       0       0
  2017 ;;      Totals:         3       0       0       0       0
  2018 ;;Total ram usage:        3 bytes
  2019 ;; Hardware stack levels used: 1
  2020 ;; Hardware stack levels required when called: 2
  2021 ;; This function calls:
  2022 ;;		_LcdALL_Cmd
  2023 ;; This function is called by:
  2024 ;;		_main
  2025 ;; This function uses a non-reentrant model
  2026 ;;
  2027                           
  2028     04B1                     _LcdALL_Set_Cursor:	
  2029                           ;psect for function _LcdALL_Set_Cursor
  2030                           
  2031                           
  2032                           ;incstack = 0
  2033                           ; Regs used in _LcdALL_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2034                           ;LcdALL_Set_Cursor@a stored from wreg
  2035     04B1  00F7               	movwf	LcdALL_Set_Cursor@a
  2036     04B2                     l1183:
  2037                           
  2038                           ;LCD_ALL.c: 39:     char temp;;LCD_ALL.c: 40:     if (a == 1) {
  2039     04B2  0377               	decf	LcdALL_Set_Cursor@a,w
  2040     04B3  1D03               	btfss	3,2
  2041     04B4  2CB6               	goto	u601
  2042     04B5  2CB7               	goto	u600
  2043     04B6                     u601:
  2044     04B6  2CC1               	goto	l1189
  2045     04B7                     u600:
  2046     04B7                     l1185:
  2047                           
  2048                           ;LCD_ALL.c: 41:         temp = 0x80 + b - 1;
  2049     04B7  0876               	movf	LcdALL_Set_Cursor@b,w
  2050     04B8  3E7F               	addlw	127
  2051     04B9  00F8               	movwf	LcdALL_Set_Cursor@temp
  2052     04BA                     l1187:
  2053                           
  2054                           ;LCD_ALL.c: 42:         LcdALL_Cmd(temp);
  2055     04BA  0878               	movf	LcdALL_Set_Cursor@temp,w
  2056     04BB  120A  118A  2497  120A  118A  	fcall	_LcdALL_Cmd
  2057                           
  2058                           ;LCD_ALL.c: 43:     } else if (a == 2) {
  2059     04C0  2CD0               	goto	l123
  2060     04C1                     l1189:
  2061     04C1  3002               	movlw	2
  2062     04C2  0677               	xorwf	LcdALL_Set_Cursor@a,w
  2063     04C3  1D03               	btfss	3,2
  2064     04C4  2CC6               	goto	u611
  2065     04C5  2CC7               	goto	u610
  2066     04C6                     u611:
  2067     04C6  2CD0               	goto	l123
  2068     04C7                     u610:
  2069     04C7                     l1191:
  2070                           
  2071                           ;LCD_ALL.c: 44:         temp = 0xC0 + b - 1;
  2072     04C7  0876               	movf	LcdALL_Set_Cursor@b,w
  2073     04C8  3EBF               	addlw	191
  2074     04C9  00F8               	movwf	LcdALL_Set_Cursor@temp
  2075     04CA                     l1193:
  2076                           
  2077                           ;LCD_ALL.c: 45:         LcdALL_Cmd(temp);
  2078     04CA  0878               	movf	LcdALL_Set_Cursor@temp,w
  2079     04CB  120A  118A  2497  120A  118A  	fcall	_LcdALL_Cmd
  2080     04D0                     l123:
  2081     04D0  0008               	return
  2082     04D1                     __end_of_LcdALL_Set_Cursor:
  2083                           
  2084                           	psect	text12
  2085     051E                     __ptext12:	
  2086 ;; *************** function _LcdALL_Init *****************
  2087 ;; Defined at:
  2088 ;;		line 49 in file "LCD_ALL.c"
  2089 ;; Parameters:    Size  Location     Type
  2090 ;;		None
  2091 ;; Auto vars:     Size  Location     Type
  2092 ;;		None
  2093 ;; Return value:  Size  Location     Type
  2094 ;;                  1    wreg      void 
  2095 ;; Registers used:
  2096 ;;		wreg, status,2, status,0, pclath, cstack
  2097 ;; Tracked objects:
  2098 ;;		On entry : 0/0
  2099 ;;		On exit  : 0/0
  2100 ;;		Unchanged: 0/0
  2101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2102 ;;      Params:         0       0       0       0       0
  2103 ;;      Locals:         0       0       0       0       0
  2104 ;;      Temps:          2       0       0       0       0
  2105 ;;      Totals:         2       0       0       0       0
  2106 ;;Total ram usage:        2 bytes
  2107 ;; Hardware stack levels used: 1
  2108 ;; Hardware stack levels required when called: 2
  2109 ;; This function calls:
  2110 ;;		_LcdALL_Cmd
  2111 ;;		_LcdALL_Port
  2112 ;; This function is called by:
  2113 ;;		_main
  2114 ;; This function uses a non-reentrant model
  2115 ;;
  2116                           
  2117     051E                     _LcdALL_Init:	
  2118                           ;psect for function _LcdALL_Init
  2119                           
  2120     051E                     l1173:	
  2121                           ;incstack = 0
  2122                           ; Regs used in _LcdALL_Init: [wreg+status,2+status,0+pclath+cstack]
  2123                           
  2124                           
  2125                           ;LCD_ALL.c: 50:     LcdALL_Port(0x00);
  2126     051E  3000               	movlw	0
  2127     051F  120A  118A  268D  120A  118A  	fcall	_LcdALL_Port
  2128     0524                     l1175:
  2129                           
  2130                           ;LCD_ALL.c: 51:     _delay((unsigned long)((20)*(8000000/4000.0)));
  2131     0524  3034               	movlw	52
  2132     0525  00F7               	movwf	??_LcdALL_Init+1
  2133     0526  30F1               	movlw	241
  2134     0527  00F6               	movwf	??_LcdALL_Init
  2135     0528                     u727:
  2136     0528  0BF6               	decfsz	??_LcdALL_Init,f
  2137     0529  2D28               	goto	u727
  2138     052A  0BF7               	decfsz	??_LcdALL_Init+1,f
  2139     052B  2D28               	goto	u727
  2140     052C  2D2D               	nop2
  2141     052D                     l1177:
  2142                           
  2143                           ;LCD_ALL.c: 52:     LcdALL_Cmd(0x30);
  2144     052D  3030               	movlw	48
  2145     052E  120A  118A  2497  120A  118A  	fcall	_LcdALL_Cmd
  2146                           
  2147                           ;LCD_ALL.c: 53:     _delay((unsigned long)((5)*(8000000/4000.0)));
  2148     0533  300D               	movlw	13
  2149     0534  00F7               	movwf	??_LcdALL_Init+1
  2150     0535  30FB               	movlw	251
  2151     0536  00F6               	movwf	??_LcdALL_Init
  2152     0537                     u737:
  2153     0537  0BF6               	decfsz	??_LcdALL_Init,f
  2154     0538  2D37               	goto	u737
  2155     0539  0BF7               	decfsz	??_LcdALL_Init+1,f
  2156     053A  2D37               	goto	u737
  2157     053B  2D3C               	nop2
  2158     053C                     l1179:
  2159                           
  2160                           ;LCD_ALL.c: 54:     LcdALL_Cmd(0x30);
  2161     053C  3030               	movlw	48
  2162     053D  120A  118A  2497  120A  118A  	fcall	_LcdALL_Cmd
  2163     0542                     l1181:
  2164                           
  2165                           ;LCD_ALL.c: 55:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  2166     0542  3042               	movlw	66
  2167     0543  00F6               	movwf	??_LcdALL_Init
  2168     0544                     u747:
  2169     0544  0BF6               	decfsz	??_LcdALL_Init,f
  2170     0545  2D44               	goto	u747
  2171     0546  0000               	nop
  2172                           
  2173                           ;LCD_ALL.c: 57:     LcdALL_Cmd(0x38);
  2174     0547  3038               	movlw	56
  2175     0548  120A  118A  2497  120A  118A  	fcall	_LcdALL_Cmd
  2176                           
  2177                           ;LCD_ALL.c: 58:     LcdALL_Cmd(0x0C);
  2178     054D  300C               	movlw	12
  2179     054E  120A  118A  2497  120A  118A  	fcall	_LcdALL_Cmd
  2180                           
  2181                           ;LCD_ALL.c: 59:     LcdALL_Cmd(0x01);
  2182     0553  3001               	movlw	1
  2183     0554  120A  118A  2497  120A  118A  	fcall	_LcdALL_Cmd
  2184                           
  2185                           ;LCD_ALL.c: 60:     LcdALL_Cmd(0x06);
  2186     0559  3006               	movlw	6
  2187     055A  120A  118A  2497  120A  118A  	fcall	_LcdALL_Cmd
  2188     055F                     l126:
  2189     055F  0008               	return
  2190     0560                     __end_of_LcdALL_Init:
  2191                           
  2192                           	psect	text13
  2193     0497                     __ptext13:	
  2194 ;; *************** function _LcdALL_Cmd *****************
  2195 ;; Defined at:
  2196 ;;		line 25 in file "LCD_ALL.c"
  2197 ;; Parameters:    Size  Location     Type
  2198 ;;  a               1    wreg     unsigned char 
  2199 ;; Auto vars:     Size  Location     Type
  2200 ;;  a               1    5[COMMON] unsigned char 
  2201 ;; Return value:  Size  Location     Type
  2202 ;;                  1    wreg      void 
  2203 ;; Registers used:
  2204 ;;		wreg, status,2, status,0, pclath, cstack
  2205 ;; Tracked objects:
  2206 ;;		On entry : 0/0
  2207 ;;		On exit  : 0/0
  2208 ;;		Unchanged: 0/0
  2209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2210 ;;      Params:         0       0       0       0       0
  2211 ;;      Locals:         1       0       0       0       0
  2212 ;;      Temps:          2       0       0       0       0
  2213 ;;      Totals:         3       0       0       0       0
  2214 ;;Total ram usage:        3 bytes
  2215 ;; Hardware stack levels used: 1
  2216 ;; Hardware stack levels required when called: 1
  2217 ;; This function calls:
  2218 ;;		_LcdALL_Port
  2219 ;; This function is called by:
  2220 ;;		_LcdALL_Set_Cursor
  2221 ;;		_LcdALL_Init
  2222 ;;		_LcdALL_Clear
  2223 ;;		_LcdALL_Shift_Right
  2224 ;;		_LcdALL_Shift_Left
  2225 ;; This function uses a non-reentrant model
  2226 ;;
  2227                           
  2228     0497                     _LcdALL_Cmd:	
  2229                           ;psect for function _LcdALL_Cmd
  2230                           
  2231                           
  2232                           ;incstack = 0
  2233                           ; Regs used in _LcdALL_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2234                           ;LcdALL_Cmd@a stored from wreg
  2235     0497  00F5               	movwf	LcdALL_Cmd@a
  2236     0498                     l1043:
  2237                           
  2238                           ;LCD_ALL.c: 26:     PORTEbits.RE0 = 0;
  2239     0498  1283               	bcf	3,5	;RP0=0, select bank0
  2240     0499  1303               	bcf	3,6	;RP1=0, select bank0
  2241     049A  1009               	bcf	9,0	;volatile
  2242     049B                     l1045:
  2243                           
  2244                           ;LCD_ALL.c: 27:     LcdALL_Port(a);
  2245     049B  0875               	movf	LcdALL_Cmd@a,w
  2246     049C  120A  118A  268D  120A  118A  	fcall	_LcdALL_Port
  2247     04A1                     l1047:
  2248                           
  2249                           ;LCD_ALL.c: 28:     PORTEbits.RE1 = 1;
  2250     04A1  1283               	bcf	3,5	;RP0=0, select bank0
  2251     04A2  1303               	bcf	3,6	;RP1=0, select bank0
  2252     04A3  1489               	bsf	9,1	;volatile
  2253     04A4                     l1049:
  2254                           
  2255                           ;LCD_ALL.c: 29:     _delay((unsigned long)((4)*(8000000/4000.0)));
  2256     04A4  300B               	movlw	11
  2257     04A5  00F4               	movwf	??_LcdALL_Cmd+1
  2258     04A6  3062               	movlw	98
  2259     04A7  00F3               	movwf	??_LcdALL_Cmd
  2260     04A8                     u757:
  2261     04A8  0BF3               	decfsz	??_LcdALL_Cmd,f
  2262     04A9  2CA8               	goto	u757
  2263     04AA  0BF4               	decfsz	??_LcdALL_Cmd+1,f
  2264     04AB  2CA8               	goto	u757
  2265     04AC  0000               	nop
  2266     04AD                     l1051:
  2267                           
  2268                           ;LCD_ALL.c: 30:     PORTEbits.RE1 = 0;
  2269     04AD  1283               	bcf	3,5	;RP0=0, select bank0
  2270     04AE  1303               	bcf	3,6	;RP1=0, select bank0
  2271     04AF  1089               	bcf	9,1	;volatile
  2272     04B0                     l114:
  2273     04B0  0008               	return
  2274     04B1                     __end_of_LcdALL_Cmd:
  2275                           
  2276                           	psect	text14
  2277     068D                     __ptext14:	
  2278 ;; *************** function _LcdALL_Port *****************
  2279 ;; Defined at:
  2280 ;;		line 9 in file "LCD_ALL.c"
  2281 ;; Parameters:    Size  Location     Type
  2282 ;;  a               1    wreg     unsigned char 
  2283 ;; Auto vars:     Size  Location     Type
  2284 ;;  a               1    2[COMMON] unsigned char 
  2285 ;; Return value:  Size  Location     Type
  2286 ;;                  1    wreg      void 
  2287 ;; Registers used:
  2288 ;;		wreg, status,2, status,0
  2289 ;; Tracked objects:
  2290 ;;		On entry : 0/0
  2291 ;;		On exit  : 0/0
  2292 ;;		Unchanged: 0/0
  2293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2294 ;;      Params:         0       0       0       0       0
  2295 ;;      Locals:         1       0       0       0       0
  2296 ;;      Temps:          2       0       0       0       0
  2297 ;;      Totals:         3       0       0       0       0
  2298 ;;Total ram usage:        3 bytes
  2299 ;; Hardware stack levels used: 1
  2300 ;; This function calls:
  2301 ;;		Nothing
  2302 ;; This function is called by:
  2303 ;;		_LcdALL_Cmd
  2304 ;;		_LcdALL_Init
  2305 ;;		_LcdALL_Write_Char
  2306 ;; This function uses a non-reentrant model
  2307 ;;
  2308                           
  2309     068D                     _LcdALL_Port:	
  2310                           ;psect for function _LcdALL_Port
  2311                           
  2312                           
  2313                           ;incstack = 0
  2314                           ; Regs used in _LcdALL_Port: [wreg+status,2+status,0]
  2315                           ;LcdALL_Port@a stored from wreg
  2316     068D  00F2               	movwf	LcdALL_Port@a
  2317     068E                     l1013:
  2318                           
  2319                           ;LCD_ALL.c: 11:     TRISB &= 0x00;
  2320     068E  1683               	bsf	3,5	;RP0=1, select bank1
  2321     068F  1303               	bcf	3,6	;RP1=0, select bank1
  2322     0690  0186               	clrf	6	;volatile
  2323     0691                     l1015:
  2324                           
  2325                           ;LCD_ALL.c: 15:     PORTBbits.RB0 = (a & 1);
  2326     0691  3001               	movlw	1
  2327     0692  0572               	andwf	LcdALL_Port@a,w
  2328     0693  00F0               	movwf	??_LcdALL_Port
  2329     0694  1283               	bcf	3,5	;RP0=0, select bank0
  2330     0695  1303               	bcf	3,6	;RP1=0, select bank0
  2331     0696  0806               	movf	6,w	;volatile
  2332     0697  0670               	xorwf	??_LcdALL_Port,w
  2333     0698  39FE               	andlw	-2
  2334     0699  0670               	xorwf	??_LcdALL_Port,w
  2335     069A  0086               	movwf	6	;volatile
  2336     069B                     l1017:
  2337                           
  2338                           ;LCD_ALL.c: 16:     PORTBbits.RB1 = (a & 2) >> 1;
  2339     069B  0872               	movf	LcdALL_Port@a,w
  2340     069C  00F0               	movwf	??_LcdALL_Port
  2341     069D  1003               	clrc
  2342     069E  0C70               	rrf	??_LcdALL_Port,w
  2343     069F  3901               	andlw	1
  2344     06A0  00F1               	movwf	??_LcdALL_Port+1
  2345     06A1  0DF1               	rlf	??_LcdALL_Port+1,f
  2346     06A2  0806               	movf	6,w	;volatile
  2347     06A3  0671               	xorwf	??_LcdALL_Port+1,w
  2348     06A4  39FD               	andlw	-3
  2349     06A5  0671               	xorwf	??_LcdALL_Port+1,w
  2350     06A6  0086               	movwf	6	;volatile
  2351     06A7                     l1019:
  2352                           
  2353                           ;LCD_ALL.c: 17:     PORTBbits.RB2 = (a & 4) >> 2;
  2354     06A7  0872               	movf	LcdALL_Port@a,w
  2355     06A8  00F0               	movwf	??_LcdALL_Port
  2356     06A9  3002               	movlw	2
  2357     06AA                     u335:
  2358     06AA  1003               	clrc
  2359     06AB  0CF0               	rrf	??_LcdALL_Port,f
  2360     06AC  3EFF               	addlw	-1
  2361     06AD  1D03               	skipz
  2362     06AE  2EAA               	goto	u335
  2363     06AF  0870               	movf	??_LcdALL_Port,w
  2364     06B0  3901               	andlw	1
  2365     06B1  00F1               	movwf	??_LcdALL_Port+1
  2366     06B2  0DF1               	rlf	??_LcdALL_Port+1,f
  2367     06B3  0DF1               	rlf	??_LcdALL_Port+1,f
  2368     06B4  0806               	movf	6,w	;volatile
  2369     06B5  0671               	xorwf	??_LcdALL_Port+1,w
  2370     06B6  39FB               	andlw	-5
  2371     06B7  0671               	xorwf	??_LcdALL_Port+1,w
  2372     06B8  0086               	movwf	6	;volatile
  2373     06B9                     l1021:
  2374                           
  2375                           ;LCD_ALL.c: 18:     PORTBbits.RB3 = (a & 8) >> 3;
  2376     06B9  0872               	movf	LcdALL_Port@a,w
  2377     06BA  00F0               	movwf	??_LcdALL_Port
  2378     06BB  3003               	movlw	3
  2379     06BC                     u345:
  2380     06BC  1003               	clrc
  2381     06BD  0CF0               	rrf	??_LcdALL_Port,f
  2382     06BE  3EFF               	addlw	-1
  2383     06BF  1D03               	skipz
  2384     06C0  2EBC               	goto	u345
  2385     06C1  0870               	movf	??_LcdALL_Port,w
  2386     06C2  3901               	andlw	1
  2387     06C3  00F1               	movwf	??_LcdALL_Port+1
  2388     06C4  0DF1               	rlf	??_LcdALL_Port+1,f
  2389     06C5  0DF1               	rlf	??_LcdALL_Port+1,f
  2390     06C6  0DF1               	rlf	??_LcdALL_Port+1,f
  2391     06C7  0806               	movf	6,w	;volatile
  2392     06C8  0671               	xorwf	??_LcdALL_Port+1,w
  2393     06C9  39F7               	andlw	-9
  2394     06CA  0671               	xorwf	??_LcdALL_Port+1,w
  2395     06CB  0086               	movwf	6	;volatile
  2396     06CC                     l1023:
  2397                           
  2398                           ;LCD_ALL.c: 19:     PORTBbits.RB4 = (a & 16) >> 4;
  2399     06CC  0872               	movf	LcdALL_Port@a,w
  2400     06CD  00F0               	movwf	??_LcdALL_Port
  2401     06CE  3004               	movlw	4
  2402     06CF                     u355:
  2403     06CF  1003               	clrc
  2404     06D0  0CF0               	rrf	??_LcdALL_Port,f
  2405     06D1  3EFF               	addlw	-1
  2406     06D2  1D03               	skipz
  2407     06D3  2ECF               	goto	u355
  2408     06D4  0870               	movf	??_LcdALL_Port,w
  2409     06D5  3901               	andlw	1
  2410     06D6  00F1               	movwf	??_LcdALL_Port+1
  2411     06D7  0EF1               	swapf	??_LcdALL_Port+1,f
  2412     06D8  0806               	movf	6,w	;volatile
  2413     06D9  0671               	xorwf	??_LcdALL_Port+1,w
  2414     06DA  39EF               	andlw	-17
  2415     06DB  0671               	xorwf	??_LcdALL_Port+1,w
  2416     06DC  0086               	movwf	6	;volatile
  2417     06DD                     l1025:
  2418                           
  2419                           ;LCD_ALL.c: 20:     PORTBbits.RB5 = (a & 32) >> 5;
  2420     06DD  0872               	movf	LcdALL_Port@a,w
  2421     06DE  00F0               	movwf	??_LcdALL_Port
  2422     06DF  3005               	movlw	5
  2423     06E0                     u365:
  2424     06E0  1003               	clrc
  2425     06E1  0CF0               	rrf	??_LcdALL_Port,f
  2426     06E2  3EFF               	addlw	-1
  2427     06E3  1D03               	skipz
  2428     06E4  2EE0               	goto	u365
  2429     06E5  0870               	movf	??_LcdALL_Port,w
  2430     06E6  3901               	andlw	1
  2431     06E7  00F1               	movwf	??_LcdALL_Port+1
  2432     06E8  0EF1               	swapf	??_LcdALL_Port+1,f
  2433     06E9  0DF1               	rlf	??_LcdALL_Port+1,f
  2434     06EA  0806               	movf	6,w	;volatile
  2435     06EB  0671               	xorwf	??_LcdALL_Port+1,w
  2436     06EC  39DF               	andlw	-33
  2437     06ED  0671               	xorwf	??_LcdALL_Port+1,w
  2438     06EE  0086               	movwf	6	;volatile
  2439     06EF                     l1027:
  2440                           
  2441                           ;LCD_ALL.c: 21:     PORTBbits.RB6 = (a & 64) >> 6;
  2442     06EF  0872               	movf	LcdALL_Port@a,w
  2443     06F0  00F0               	movwf	??_LcdALL_Port
  2444     06F1  3006               	movlw	6
  2445     06F2                     u375:
  2446     06F2  1003               	clrc
  2447     06F3  0CF0               	rrf	??_LcdALL_Port,f
  2448     06F4  3EFF               	addlw	-1
  2449     06F5  1D03               	skipz
  2450     06F6  2EF2               	goto	u375
  2451     06F7  0870               	movf	??_LcdALL_Port,w
  2452     06F8  3901               	andlw	1
  2453     06F9  00F1               	movwf	??_LcdALL_Port+1
  2454     06FA  0EF1               	swapf	??_LcdALL_Port+1,f
  2455     06FB  0DF1               	rlf	??_LcdALL_Port+1,f
  2456     06FC  0DF1               	rlf	??_LcdALL_Port+1,f
  2457     06FD  0806               	movf	6,w	;volatile
  2458     06FE  0671               	xorwf	??_LcdALL_Port+1,w
  2459     06FF  39BF               	andlw	-65
  2460     0700  0671               	xorwf	??_LcdALL_Port+1,w
  2461     0701  0086               	movwf	6	;volatile
  2462     0702                     l1029:
  2463                           
  2464                           ;LCD_ALL.c: 22:     PORTBbits.RB7 = (a & 128) >> 7;
  2465     0702  0872               	movf	LcdALL_Port@a,w
  2466     0703  00F0               	movwf	??_LcdALL_Port
  2467     0704  3007               	movlw	7
  2468     0705                     u385:
  2469     0705  1003               	clrc
  2470     0706  0CF0               	rrf	??_LcdALL_Port,f
  2471     0707  3EFF               	addlw	-1
  2472     0708  1D03               	skipz
  2473     0709  2F05               	goto	u385
  2474     070A  0870               	movf	??_LcdALL_Port,w
  2475     070B  3901               	andlw	1
  2476     070C  00F1               	movwf	??_LcdALL_Port+1
  2477     070D  0CF1               	rrf	??_LcdALL_Port+1,f
  2478     070E  0CF1               	rrf	??_LcdALL_Port+1,f
  2479     070F  0806               	movf	6,w	;volatile
  2480     0710  0671               	xorwf	??_LcdALL_Port+1,w
  2481     0711  397F               	andlw	-129
  2482     0712  0671               	xorwf	??_LcdALL_Port+1,w
  2483     0713  0086               	movwf	6	;volatile
  2484     0714                     l111:
  2485     0714  0008               	return
  2486     0715                     __end_of_LcdALL_Port:
  2487     007E                     btemp	set	126	;btemp
  2488     007E                     wtemp0	set	126
  2489                           
  2490                           	psect	idloc
  2491                           
  2492                           ;Config register IDLOC0 @ 0x2000
  2493                           ;	unspecified, using default values
  2494     2000                     	org	8192
  2495     2000  3FFF               	dw	16383
  2496                           
  2497                           ;Config register IDLOC1 @ 0x2001
  2498                           ;	unspecified, using default values
  2499     2001                     	org	8193
  2500     2001  3FFF               	dw	16383
  2501                           
  2502                           ;Config register IDLOC2 @ 0x2002
  2503                           ;	unspecified, using default values
  2504     2002                     	org	8194
  2505     2002  3FFF               	dw	16383
  2506                           
  2507                           ;Config register IDLOC3 @ 0x2003
  2508                           ;	unspecified, using default values
  2509     2003                     	org	8195
  2510     2003  3FFF               	dw	16383
  2511                           
  2512                           	psect	config
  2513                           
  2514                           ;Config register CONFIG1 @ 0x2007
  2515                           ;	Oscillator Selection bits
  2516                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  2517                           ;	Watchdog Timer Enable bit
  2518                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2519                           ;	Power-up Timer Enable bit
  2520                           ;	PWRTE = OFF, PWRT disabled
  2521                           ;	RE3/MCLR pin function select bit
  2522                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  2523                           ;	Code Protection bit
  2524                           ;	CP = OFF, Program memory code protection is disabled
  2525                           ;	Data Code Protection bit
  2526                           ;	CPD = OFF, Data memory code protection is disabled
  2527                           ;	Brown Out Reset Selection bits
  2528                           ;	BOREN = OFF, BOR disabled
  2529                           ;	Internal External Switchover bit
  2530                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  2531                           ;	Fail-Safe Clock Monitor Enabled bit
  2532                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  2533                           ;	Low Voltage Programming Enable bit
  2534                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2535                           ;	In-Circuit Debugger Mode bit
  2536                           ;	DEBUG = 0x1, unprogramme  2537     2007                     	org	8199
  2538     2007  20D4               	dw	8404
  2539                           
  2540                           ;Config register CONFIG2 @ 0x2008
  2541                           ;	Brown-out Reset Selection bit
  2542                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  2543                           ;	Flash Program Memory Self Write Enable bits
  2544                           ;	WRT = OFF, Write protection off
  2545     2008                     	org	8200
  2546     2008  3FFF               	dw	16383

Data Sizes:
    Strings     23
    Constant    0
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     15      17
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LcdALL_Write_String@a	PTR unsigned char  size(1) Largest target is 18
		 -> STR_3(CODE[5]), STR_2(CODE[4]), STR_1(CODE[18]), 


Critical Paths under _main in COMMON

    _setup->_spiInit
    _LcdALL_set_value->___awdiv
    ___awdiv->___awmod
    _LcdALL_Write_String->_LcdALL_Write_Char
    _LcdALL_Write_Char->_LcdALL_Port
    _LcdALL_Set_Cursor->_LcdALL_Cmd
    _LcdALL_Init->_LcdALL_Cmd
    _LcdALL_Cmd->_LcdALL_Port

Critical Paths under _main in BANK0

    _main->_LcdALL_set_value
    _LcdALL_set_value->___awdiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3392
                                             12 BANK0      3     3      0
                        _LcdALL_Init
                  _LcdALL_Set_Cursor
                _LcdALL_Write_String
                   _LcdALL_set_value
                              _setup
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (1) _spiWrite                                             1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (2) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     360
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     360
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _LcdALL_set_value                                     8     6      2    1765
                                              4 BANK0      8     6      2
                  _LcdALL_Write_Char
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     600
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     604
                                              7 COMMON     5     1      4
                                              0 BANK0      4     4      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _LcdALL_Write_String                                  3     3      0     387
                                              5 COMMON     3     3      0
                  _LcdALL_Write_Char
 ---------------------------------------------------------------------------------
 (2) _LcdALL_Write_Char                                    2     2      0     198
                                              3 COMMON     2     2      0
                        _LcdALL_Port
 ---------------------------------------------------------------------------------
 (1) _LcdALL_Set_Cursor                                    3     2      1     484
                                              6 COMMON     3     2      1
                         _LcdALL_Cmd
 ---------------------------------------------------------------------------------
 (1) _LcdALL_Init                                          2     2      0     374
                                              6 COMMON     2     2      0
                         _LcdALL_Cmd
                        _LcdALL_Port
 ---------------------------------------------------------------------------------
 (2) _LcdALL_Cmd                                           3     3      0     198
                                              3 COMMON     3     3      0
                        _LcdALL_Port
 ---------------------------------------------------------------------------------
 (3) _LcdALL_Port                                          3     3      0     176
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LcdALL_Init
     _LcdALL_Cmd
       _LcdALL_Port
     _LcdALL_Port
   _LcdALL_Set_Cursor
     _LcdALL_Cmd
   _LcdALL_Write_String
     _LcdALL_Write_Char
       _LcdALL_Port
   _LcdALL_set_value
     _LcdALL_Write_Char
     ___awdiv
       ___awmod (ARG)
     ___awmod
   _setup
     _spiInit
   _spiRead
     _spiReceiveWait
   _spiWrite

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      1F       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      F      11       5       21.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      1F      12        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Aug 01 16:28:20 2023

                          pc 0002                  _SSPSTATbits 0094                           l57 071F  
                         l82 0491                           l66 051D                           l83 0496  
                         l92 045A                           l86 045B                           l89 0461  
               ___awdiv@sign 0021                           fsr 0004                          l100 046A  
                        l111 0714                          l114 04B0                          l123 04D0  
                        l126 055F                          l135 04F5                          l144 068C  
                        l129 0480                          _ADC 007D                          l386 0621  
                        l399 05B8                          u400 0461                          u401 0460  
                        u410 05C0                          u411 05BF                          u500 0618  
                        u420 05CB                          u501 0617                          u421 05CA  
                        u430 05DC                          u510 0565                          u335 06AA  
                        u431 05DB                          u511 0564                          u600 04B7  
                        u520 0570                          u345 06BC                          u601 04B6  
                        u521 056F                          u610 04C7                          u450 05EE  
                        u530 057B                          u355 06CF                          u611 04C6  
                        u451 05ED                          u531 057A                          u620 04F5  
                        u365 06E0                          u621 04F4                          u445 05E0  
                        u470 05FF                          u550 058D                          u390 0489  
                        u630 073F                          u375 06F2                          u471 05FE  
                        u551 058C                          u391 0488                          u631 073E  
                        u560 0597                          u640 0757                          u385 0705  
                        u465 05EF                          u561 0596                          u545 057F  
                        u641 0756                          u490 0613                          u491 0612  
                        u475 05FB                          u707 07ED                          u580 05AA  
                        u717 047A                          u485 0607                          u581 05A9  
                        u565 0593                          u590 05AF                          u727 0528  
                        u591 05AE                          u575 059E                          u737 0537  
                        u657 0736                          u747 0544                          u667 076E  
                        u757 04A8                          u677 077C                          u687 0794  
                        u697 07A3                          fsr0 0004                 ___awmod@sign 0076  
                 _LcdALL_Cmd 0497                         l1021 06B9                         l1013 068E  
                       l1101 0618                         l1023 06CC                         l1015 0691  
                       l1103 061D                         l1111 0565                         l1031 0482  
                       l1025 06DD                         l1017 069B                         l1201 04E8  
                       l1121 057B                         l1113 056A                         l1033 0489  
                       l1041 045B                         l1027 06EF                         l1019 06A7  
                       l1051 04AD                         l1043 0498                         l1131 0597  
                       l1123 057E                         l1115 056C                         l1107 0560  
                       l1211 0622                         l1035 048B                         l1203 0456  
                       l1029 0702                         l1045 049B                         l1061 047D  
                       l1053 046C                         l1141 05B4                         l1133 059D  
                       l1125 0585                         l1117 0570                         l1109 0561  
                       l1037 048D                         l1205 0462                         l1221 073A  
                       l1213 0715                         l1047 04A1                         l1055 046F  
                       l1071 05C7                         l1063 05B9                         l1135 05A4  
                       l1127 0589                         l1119 0575                         l1039 0490  
                       l1151 04FE                         l1207 0467                         l1231 0757  
                       l1223 073F                         l1215 0727                         l1049 04A4  
                       l1057 0475                         l1081 05DC                         l1073 05CB  
                       l1065 05BC                         l1129 058D                         l1137 05AA  
                       l1161 0509                         l1153 0501                         l1145 04F6  
                       l1241 0775                         l1233 0765                         l1225 074D  
                       l1217 072D                         l1059 0478                         l1091 05FF  
                       l1083 05DF                         l1075 05D0                         l1067 05C0  
                       l1139 05AF                         l1171 0514                         l1163 050A  
                       l1155 0504                         l1147 04FA                         l1251 0798  
                       l1243 0776                         l1235 0767                         l1227 074F  
                       l1219 0730                         l1181 0542                         l1173 051E  
                       l1093 0605                         l1085 05E6                         l1077 05D4  
                       l1069 05C5                         l1165 050D                         l1157 0507  
                       l1149 04FB                         l1261 07C5                         l1253 079B  
                       l1245 0780                         l1237 0768                         l1229 0752  
                       l1175 0524                         l1191 04C7                         l1183 04B2  
                       l1095 0606                         l1087 05EA                         l1079 05D6  
                       l1167 050E                         l1159 0508                         l1263 07D3  
                       l1255 07A9                         l1247 0786                         l1239 0772  
                       l1177 052D                         l1193 04CA                         l1185 04B7  
                       l1097 060D                         l1089 05EE                         l1169 0511  
                       l1265 07D9                         l1257 07B1                         l1249 078E  
                       l1179 053C                         l1187 04BA                         l1195 04D2  
                       l1099 0613                         l1267 07E7                         l1259 07BF  
                       l1189 04C1                         l1197 04D5                         l1199 04E2  
                       STR_1 0009                         STR_2 001C                         STR_3 001B  
                       _CONT 0030                         _TEMP 002F                         _main 0715  
                       _modo 007C                         btemp 007E                         start 0000  
                _LcdALL_Init 051E                  _LcdALL_Port 068D                        ?_main 0070  
            __end_of___awdiv 0622              __end_of___awmod 05B9                        _ANSEL 0188  
            ___awdiv@divisor 0077              ___awdiv@counter 0020                        _PORTA 0005  
                      _PORTB 0006                        _PORTD 0008                        _TRISA 0085  
                      _TRISB 0086                        _TRISD 0088                        _TRISE 0089  
                      _setup 04F6                        pclath 000A              __end_of_spiInit 0497  
            __end_of_spiRead 046B                        status 0003                        wtemp0 007E  
            __initialization 07F6                 __end_of_main 07F6  __end_of_LcdALL_Write_String 04F6  
                     ??_main 002C                  ?_LcdALL_Cmd 0070             ___awdiv@dividend 0079  
                     ?_setup 0070                       _ANSELH 0189                       _TRISC1 0439  
                     _TRISC2 043A                       _TRISC3 043B                       _TRISC5 043D  
                     _SSPCON 0014                       _SSPBUF 0013                    ??___awdiv 007B  
                  ??___awmod 0074             ___awdiv@quotient 0022              ___awmod@divisor 0070  
            ___awmod@counter 0075             __end_of_spiWrite 045B                    ??_spiInit 0073  
                  ??_spiRead 0070      __end_of__initialization 07FC               __pcstackCOMMON 0070  
              __end_of_setup 051E                      ??_setup 0074                   __pbssBANK0 002F  
                 __pmaintext 0715                 ?_LcdALL_Init 0070                 ?_LcdALL_Port 0070  
         LcdALL_Write_Char@a 0074                      _SSPSTAT 0094                   __stringtab 0003  
                  ?_spiWrite 0070                      ___awdiv 05B9                      ___awmod 0560  
                    __ptext1 0455                      __ptext2 0462                      __ptext3 045B  
                    __ptext4 04F6                      __ptext5 0481                      __ptext6 0622  
                    __ptext7 0560                      __ptext8 05B9                      __ptext9 04D1  
               LcdALL_Port@a 0072             ___awmod@dividend 0072                 ??_LcdALL_Cmd 0073  
                    _spiInit 0481                      _spiRead 0462             _LcdALL_set_value 0622  
       end_of_initialization 07FC                   ??_spiWrite 0070           __end_of_LcdALL_Cmd 04B1  
                  _PORTBbits 0006                    _PORTCbits 0007                    _PORTEbits 0009  
       LcdALL_Write_String@a 0077         LcdALL_Write_String@i 0075                  spiWrite@dat 0070  
             _spiReceiveWait 045B          start_initialization 07F6            _LcdALL_Set_Cursor 04B1  
         ?_LcdALL_Set_Cursor 0076       __end_of_spiReceiveWait 0462          ??_LcdALL_Set_Cursor 0077  
                __pbssCOMMON 007C                    ___latbits 0002                __pcstackBANK0 0020  
  __end_of_LcdALL_Set_Cursor 04D1              ?_spiReceiveWait 0070                     ?___awdiv 0077  
   __end_of_LcdALL_set_value 068D                     ?___awmod 0070            _LcdALL_Write_Char 046B  
                  __pstrings 0003           ?_LcdALL_Write_Char 0070                     ?_spiInit 0070  
                   ?_spiRead 0070          ??_LcdALL_Write_Char 0073                  LcdALL_Cmd@a 0075  
       spiInit@sTransmitEdge 0072           spiInit@sDataSample 0070          _LcdALL_Write_String 04D1  
  __end_of_LcdALL_Write_Char 0481                  __stringbase 0008         ?_LcdALL_Write_String 0070  
         __end_of__stringtab 0009        ??_LcdALL_Write_String 0075                     __ptext10 046B  
                   __ptext11 04B1                     __ptext12 051E                     __ptext13 0497  
                   __ptext14 068D                ??_LcdALL_Init 0076                ??_LcdALL_Port 0070  
                   _spiWrite 0455                 spiInit@sType 0073            spiInit@sClockIdle 0071  
           ??_spiReceiveWait 0070     LcdALL_set_value@centenas 0026                    stringcode 0003  
      LcdALL_Set_Cursor@temp 0078                   _OSCCONbits 008F            ?_LcdALL_set_value 0024  
         ??_LcdALL_set_value 007C   LcdALL_set_value@byte_value 0024          __end_of_LcdALL_Init 0560  
        __end_of_LcdALL_Port 0715      LcdALL_set_value@decenas 0028     LcdALL_set_value@unidades 002A  
                   stringdir 0003                     stringtab 0003           LcdALL_Set_Cursor@a 0077  
         LcdALL_Set_Cursor@b 0076  
